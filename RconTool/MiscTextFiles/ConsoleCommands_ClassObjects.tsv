public static ConsoleCommand Clear                                      	= new ConsoleCommand() { 	Name="Clear",                                      	Group="Global",   	Command="Clear",                                      	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Server|Flag.Banned, 	Description="Clear the Console's input and output areas" };
public static ConsoleCommand Execute                                    	= new ConsoleCommand() { 	Name="Execute",                                    	Group="Global",   	Command="Execute",                                    	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Server|Flag.Banned, 	Description="Executes a list of commands" };
public static ConsoleCommand Help                                       	= new ConsoleCommand() { 	Name="Help",                                       	Group="Global",   	Command="Help",                                       	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Server|Flag.Banned, 	Description="Displays this help text" };
public static ConsoleCommand Variables                                  	= new ConsoleCommand() { 	Name="Variables",                                  	Group="Global",   	Command="Variables",                                  	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Server|Flag.Banned, 	Description="Display all game variables with current values and a description" };
public static ConsoleCommand WriteConfig                                	= new ConsoleCommand() { 	Name="WriteConfig",                                	Group="Global",   	Command="WriteConfig",                                	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Server|Flag.Banned, 	Description="Writes the ElDewrito config file" };
public static ConsoleCommand Camera_CenteredCrosshairFirst              	= new ConsoleCommand() { 	Name="Camera_CenteredCrosshairFirst",              	Group="Camera",   	Command="Camera.CenteredCrosshairFirst",              	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls whether the crosshair should be centered in first person" };
public static ConsoleCommand Camera_CenteredCrosshairThird              	= new ConsoleCommand() { 	Name="Camera_CenteredCrosshairThird",              	Group="Camera",   	Command="Camera.CenteredCrosshairThird",              	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls whether the crosshair should be centered in third person" };
public static ConsoleCommand Camera_FOV                                 	= new ConsoleCommand() { 	Name="Camera_FOV",                                 	Group="Camera",   	Command="Camera.FOV",                                 	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="The cameras field of view" };
public static ConsoleCommand Camera_FocusDistance                       	= new ConsoleCommand() { 	Name="Camera_FocusDistance",                       	Group="Camera",   	Command="Camera.FocusDistance",                       	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="The camera focus distance. Only applies to the third person. 0 = unchanged" };
public static ConsoleCommand Camera_HideHUD                             	= new ConsoleCommand() { 	Name="Camera_HideHUD",                             	Group="Camera",   	Command="Camera.HideHUD",                             	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Toggles the HUD" };
public static ConsoleCommand Camera_HideKillFeed                        	= new ConsoleCommand() { 	Name="Camera_HideKillFeed",                        	Group="Camera",   	Command="Camera.HideKillFeed",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Toggles the Kill Feed" };
public static ConsoleCommand Camera_Mode                                	= new ConsoleCommand() { 	Name="Camera_Mode",                                	Group="Camera",   	Command="Camera.Mode",                                	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Camera mode, valid modes: default, first, third, flying, static" };
public static ConsoleCommand Camera_Position                            	= new ConsoleCommand() { 	Name="Camera_Position",                            	Group="Camera",   	Command="Camera.Position",                            	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="The cameras position, Doesn't work when camera mode is set to default" };
public static ConsoleCommand Camera_ShowCoordinates                     	= new ConsoleCommand() { 	Name="Camera_ShowCoordinates",                     	Group="Camera",   	Command="Camera.ShowCoordinates",                     	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="The cameras field of view" };
public static ConsoleCommand Camera_Smoothing                           	= new ConsoleCommand() { 	Name="Camera_Smoothing",                           	Group="Camera",   	Command="Camera.Smoothing",                           	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="The flying camera smoothing factor" };
public static ConsoleCommand Camera_Speed                               	= new ConsoleCommand() { 	Name="Camera_Speed",                               	Group="Camera",   	Command="Camera.Speed",                               	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="The camera speed" };
public static ConsoleCommand Camera_VertSpeed                           	= new ConsoleCommand() { 	Name="Camera_VertSpeed",                           	Group="Camera",   	Command="Camera.VertSpeed",                           	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="The camera's vertical speed" };
public static ConsoleCommand Campaign_CinematicFrameRate                	= new ConsoleCommand() { 	Name="Campaign_CinematicFrameRate",                	Group="Campaign", 	Command="Campaign.CinematicFrameRate",                	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Set the cinematic frame rate in seconds" };
public static ConsoleCommand Campaign_DifficultyLevel                   	= new ConsoleCommand() { 	Name="Campaign_DifficultyLevel",                   	Group="Campaign", 	Command="Campaign.DifficultyLevel",                   	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Sets the campaign difficulty level. (easy, normal, heroic, legendary)" };
public static ConsoleCommand Campaign_InsertionPoint                    	= new ConsoleCommand() { 	Name="Campaign_InsertionPoint",                    	Group="Campaign", 	Command="Campaign.InsertionPoint",                    	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Changes the current insertion point." };
public static ConsoleCommand Campaign_MetagameScoring                   	= new ConsoleCommand() { 	Name="Campaign_MetagameScoring",                   	Group="Campaign", 	Command="Campaign.MetagameScoring",                   	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Changes the metagame scoring options. (off, team, ffa)" };
public static ConsoleCommand Campaign_PlayerRepresentationEnabled       	= new ConsoleCommand() { 	Name="Campaign_PlayerRepresentationEnabled",       	Group="Campaign", 	Command="Campaign.PlayerRepresentationEnabled",       	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Determines whether the player campaign representation will be used." };
public static ConsoleCommand Campaign_Skulls                            	= new ConsoleCommand() { 	Name="Campaign_Skulls",                            	Group="Campaign", 	Command="Campaign.Skulls",                            	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Set the campaign skulls (iron, black_eye, tough_luck, catch, fog, famine, thunderstorm, tilt, mythic, assassin, blind, superman, birthday, daddy, third_person, directors_cut)" };
public static ConsoleCommand Campaign_SprintEnabled                     	= new ConsoleCommand() { 	Name="Campaign_SprintEnabled",                     	Group="Campaign", 	Command="Campaign.SprintEnabled",                     	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Sets whether sprint will be enabled during campaign" };
public static ConsoleCommand Cheat_AllEquipment                         	= new ConsoleCommand() { 	Name="Cheat_AllEquipment",                         	Group="Cheat",    	Command="Cheat.AllEquipment",                         	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Gives the player all equipment" };
public static ConsoleCommand Cheat_AllVehicles                          	= new ConsoleCommand() { 	Name="Cheat_AllVehicles",                          	Group="Cheat",    	Command="Cheat.AllVehicles",                          	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Gives the player all vehicles" };
public static ConsoleCommand Cheat_AllWeapons                           	= new ConsoleCommand() { 	Name="Cheat_AllWeapons",                           	Group="Cheat",    	Command="Cheat.AllWeapons",                           	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Gives the player all weapons" };
public static ConsoleCommand Cheat_DeleteWeapons                        	= new ConsoleCommand() { 	Name="Cheat_DeleteWeapons",                        	Group="Cheat",    	Command="Cheat.DeleteWeapons",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Deletes the current weapons" };
public static ConsoleCommand Cheat_Spawn                                	= new ConsoleCommand() { 	Name="Cheat_Spawn",                                	Group="Cheat",    	Command="Cheat.Spawn",                                	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Spawn an object" };
public static ConsoleCommand Console_AutoCompleteMode                   	= new ConsoleCommand() { 	Name="Console_AutoCompleteMode",                   	Group="Console",  	Command="Console.AutoCompleteMode",                   	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Toggle between the Console auto complete modes. Options: 0, 1, 2, Prefix, or Substring. Setting it to 0 will toggle between Prefix and Substring modes" };
public static ConsoleCommand Console_Dock                               	= new ConsoleCommand() { 	Name="Console_Dock",                               	Group="Console",  	Command="Console.Dock",                               	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Toggle Console docking, allows you to drag and resize the console if undocked. Options: 0, 1 or 2. Setting it to 0 will do the same as the Dock button" };
public static ConsoleCommand Console_History                            	= new ConsoleCommand() { 	Name="Console_History",                            	Group="Console",  	Command="Console.History",                            	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Display the commands in the Console's command history, you can navigate the command history using the arrow up/down keys" };
public static ConsoleCommand Console_Invert                             	= new ConsoleCommand() { 	Name="Console_Invert",                             	Group="Console",  	Command="Console.Invert",                             	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Inverts the Console input box and drag handle" };
public static ConsoleCommand Console_MaxHistory                         	= new ConsoleCommand() { 	Name="Console_MaxHistory",                         	Group="Console",  	Command="Console.MaxHistory",                         	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Set the Console's maximum history" };
public static ConsoleCommand Console_Opacity                            	= new ConsoleCommand() { 	Name="Console_Opacity",                            	Group="Console",  	Command="Console.Opacity",                            	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Set the Console's overall opacity. Range: 0 - 100. Do not set below 40" };
public static ConsoleCommand Console_Reset                              	= new ConsoleCommand() { 	Name="Console_Reset",                              	Group="Console",  	Command="Console.Reset",                              	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Reset the Console, useful if something goes wrong and you can no longer properly use the console" };
public static ConsoleCommand Console_Size                               	= new ConsoleCommand() { 	Name="Console_Size",                               	Group="Console",  	Command="Console.Size",                               	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Set the Console's output box size manually. Options: 1, 2, 3 or 4. Setting it to 0 will do the same as Console.ToggleSize" };
public static ConsoleCommand Console_Transparency                       	= new ConsoleCommand() { 	Name="Console_Transparency",                       	Group="Console",  	Command="Console.Transparency",                       	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Set the Console's background transparency. Range: 0 - 100" };
public static ConsoleCommand Debug_Acrophobia                           	= new ConsoleCommand() { 	Name="Debug_Acrophobia",                           	Group="Debug",    	Command="Debug.Acrophobia",                           	 	Args = ArgType.Boolean,                                	Flags=Flag.Client|Flag.Server,             	Description="Enables the Acrophobia skull effect, allowing players to fly" };
public static ConsoleCommand Debug_Clusters                             	= new ConsoleCommand() { 	Name="Debug_Clusters",                             	Group="Debug",    	Command="Debug.Clusters",                             	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Display the clusters of the current structure bsp" };
public static ConsoleCommand Debug_CollisionModels                      	= new ConsoleCommand() { 	Name="Debug_CollisionModels",                      	Group="Debug",    	Command="Debug.CollisionModels",                      	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Displays object collision model geometry" };
public static ConsoleCommand Debug_CollisionTest                        	= new ConsoleCommand() { 	Name="Debug_CollisionTest",                        	Group="Debug",    	Command="Debug.CollisionTest",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Displays info about the collision surface under the crosshair" };
public static ConsoleCommand Debug_CrashReporting                       	= new ConsoleCommand() { 	Name="Debug_CrashReporting",                       	Group="Debug",    	Command="Debug.CrashReporting",                       	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Enables crash reporting" };
public static ConsoleCommand Debug_DamageAOE                            	= new ConsoleCommand() { 	Name="Debug_DamageAOE",                            	Group="Debug",    	Command="Debug.DamageAOE",                            	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Debug damage area of effect" };
public static ConsoleCommand Debug_DamageAOEDisplayTime                 	= new ConsoleCommand() { 	Name="Debug_DamageAOEDisplayTime",                 	Group="Debug",    	Command="Debug.DamageAOEDisplayTime",                 	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls the duration of damage area of effect display" };
public static ConsoleCommand Debug_DumpTags                             	= new ConsoleCommand() { 	Name="Debug_DumpTags",                             	Group="Debug",    	Command="Debug.DumpTags",                             	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Dumps a list of loaded tags" };
public static ConsoleCommand Debug_FilterSounds                         	= new ConsoleCommand() { 	Name="Debug_FilterSounds",                         	Group="Debug",    	Command="Debug.FilterSounds",                         	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Ignore all sound class excepts the specified value. 65 means all sound classes." };
public static ConsoleCommand Debug_GeometrySamplerQuality               	= new ConsoleCommand() { 	Name="Debug_GeometrySamplerQuality",               	Group="Debug",    	Command="Debug.GeometrySamplerQuality",               	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Sets the geometry sampler quality (0 = disabled, 1 = normal, 2 = best)" };
public static ConsoleCommand Debug_LoopingSounds                        	= new ConsoleCommand() { 	Name="Debug_LoopingSounds",                        	Group="Debug",    	Command="Debug.LoopingSounds",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Displays info about the current active looping sounds." };
public static ConsoleCommand Debug_MapBarriersDisabled                  	= new ConsoleCommand() { 	Name="Debug_MapBarriersDisabled",                  	Group="Debug",    	Command="Debug.MapBarriersDisabled",                  	 	Args = ArgType.Boolean,                                	Flags=Flag.Client|Flag.Server,             	Description="Disables map push/death barriers" };
public static ConsoleCommand Debug_MarkerGroupFilter                    	= new ConsoleCommand() { 	Name="Debug_MarkerGroupFilter",                    	Group="Debug",    	Command="Debug.MarkerGroupFilter",                    	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Filter which marker groups are displayed" };
public static ConsoleCommand Debug_MarkerGroups                         	= new ConsoleCommand() { 	Name="Debug_MarkerGroups",                         	Group="Debug",    	Command="Debug.MarkerGroups",                         	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Displays object markers" };
public static ConsoleCommand Debug_PhysicsModels                        	= new ConsoleCommand() { 	Name="Debug_PhysicsModels",                        	Group="Debug",    	Command="Debug.PhysicsModels",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Displays object physics model geometry" };
public static ConsoleCommand Debug_PlayerDamageDisabled                 	= new ConsoleCommand() { 	Name="Debug_PlayerDamageDisabled",                 	Group="Debug",    	Command="Debug.PlayerDamageDisabled",                 	 	Args = ArgType.Boolean,                                	Flags=Flag.Client|Flag.Server,             	Description="Players take no damage" };
public static ConsoleCommand Debug_ScriptName                           	= new ConsoleCommand() { 	Name="Debug_ScriptName",                           	Group="Debug",    	Command="Debug.ScriptName",                           	 	Args = ArgType.ScriptName,                             	Flags=Flag.Client|Flag.Server,             	Description="Filter trace to the given script" };
public static ConsoleCommand Debug_ScriptTrace                          	= new ConsoleCommand() { 	Name="Debug_ScriptTrace",                          	Group="Debug",    	Command="Debug.ScriptTrace",                          	 	Args = ArgType.Boolean,                                	Flags=Flag.Client|Flag.Server,             	Description="Enable script tracing" };
public static ConsoleCommand Debug_ScriptTraceFile                      	= new ConsoleCommand() { 	Name="Debug_ScriptTraceFile",                      	Group="Debug",    	Command="Debug.ScriptTraceFile",                      	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="File to trace to" };
public static ConsoleCommand Debug_ShowCrte                             	= new ConsoleCommand() { 	Name="Debug_ShowCrte",                             	Group="Debug",    	Command="Debug.ShowCrte",                             	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Forces a crte scene to display. Use tagname or hex index" };
public static ConsoleCommand Debug_SoundSources                         	= new ConsoleCommand() { 	Name="Debug_SoundSources",                         	Group="Debug",    	Command="Debug.SoundSources",                         	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Displays info about the current active sound sources." };
public static ConsoleCommand Debug_StructureCollision                   	= new ConsoleCommand() { 	Name="Debug_StructureCollision",                   	Group="Debug",    	Command="Debug.StructureCollision",                   	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Displays structure collision geometry" };
public static ConsoleCommand Debug_TriggerVolumes                       	= new ConsoleCommand() { 	Name="Debug_TriggerVolumes",                       	Group="Debug",    	Command="Debug.TriggerVolumes",                       	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Displays trigger volumes" };
public static ConsoleCommand Debug_Visibility                           	= new ConsoleCommand() { 	Name="Debug_Visibility",                           	Group="Debug",    	Command="Debug.Visibility",                           	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Display statistics for visible render items and item groups" };
public static ConsoleCommand Download_DebugTrace                        	= new ConsoleCommand() { 	Name="Download_DebugTrace",                        	Group="Download", 	Command="Download.DebugTrace",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="Enables debug tracing for downloads" };
public static ConsoleCommand Download_MaxHttpConnections                	= new ConsoleCommand() { 	Name="Download_MaxHttpConnections",                	Group="Download", 	Command="Download.MaxHttpConnections",                	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="Controls the maximum number of http connections per download" };
public static ConsoleCommand Download_MaxHttpSegmentRetry               	= new ConsoleCommand() { 	Name="Download_MaxHttpSegmentRetry",               	Group="Download", 	Command="Download.MaxHttpSegmentRetry",               	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="Controls the maximum number of times a segment is retried before the download is aborted" };
public static ConsoleCommand Download_MinHttpSegmentSize                	= new ConsoleCommand() { 	Name="Download_MinHttpSegmentSize",                	Group="Download", 	Command="Download.MinHttpSegmentSize",                	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="Controls the minimum size that a segment can be split" };
public static ConsoleCommand Forge_Budget                               	= new ConsoleCommand() { 	Name="Forge_Budget",                               	Group="Forge",    	Command="Forge.Budget",                               	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Displays information about remaining objects" };
public static ConsoleCommand Forge_Canvas                               	= new ConsoleCommand() { 	Name="Forge_Canvas",                               	Group="Forge",    	Command="Forge.Canvas",                               	 	Args = ArgType.None,                                   	Flags=Flag.Client|Flag.Server,             	Description="Delete all objects on the map" };
public static ConsoleCommand Forge_CloneDepth                           	= new ConsoleCommand() { 	Name="Forge_CloneDepth",                           	Group="Forge",    	Command="Forge.CloneDepth",                           	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Depth at which the object will be cloned" };
public static ConsoleCommand Forge_CloneMultiplier                      	= new ConsoleCommand() { 	Name="Forge_CloneMultiplier",                      	Group="Forge",    	Command="Forge.CloneMultiplier",                      	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Number of consecutive times the object will be cloned" };
public static ConsoleCommand Forge_DeleteAll                            	= new ConsoleCommand() { 	Name="Forge_DeleteAll",                            	Group="Forge",    	Command="Forge.DeleteAll",                            	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Delete all objects that are the same as the object under the crosshair" };
public static ConsoleCommand Forge_DeletePrefab                         	= new ConsoleCommand() { 	Name="Forge_DeletePrefab",                         	Group="Forge",    	Command="Forge.DeletePrefab",                         	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Delete a saved prefab" };
public static ConsoleCommand Forge_DeselectAll                          	= new ConsoleCommand() { 	Name="Forge_DeselectAll",                          	Group="Forge",    	Command="Forge.DeselectAll",                          	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Deselect all selected objects" };
public static ConsoleCommand Forge_DeselectAllOf                        	= new ConsoleCommand() { 	Name="Forge_DeselectAllOf",                        	Group="Forge",    	Command="Forge.DeselectAllOf",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Deselect all selected objects that are the same as the object under the crosshair" };
public static ConsoleCommand Forge_DumpPrefabs                          	= new ConsoleCommand() { 	Name="Forge_DumpPrefabs",                          	Group="Forge",    	Command="Forge.DumpPrefabs",                          	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Dump a list of saved prefabs in json" };
public static ConsoleCommand Forge_ExpandSelection                      	= new ConsoleCommand() { 	Name="Forge_ExpandSelection",                      	Group="Forge",    	Command="Forge.ExpandSelection",                      	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Expand the selection by a given radius" };
public static ConsoleCommand Forge_GrabDistance                         	= new ConsoleCommand() { 	Name="Forge_GrabDistance",                         	Group="Forge",    	Command="Forge.GrabDistance",                         	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls the maximum distance from which objects can be grabbed" };
public static ConsoleCommand Forge_InvertSelection                      	= new ConsoleCommand() { 	Name="Forge_InvertSelection",                      	Group="Forge",    	Command="Forge.InvertSelection",                      	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Invert the current selection" };
public static ConsoleCommand Forge_LoadPrefab                           	= new ConsoleCommand() { 	Name="Forge_LoadPrefab",                           	Group="Forge",    	Command="Forge.LoadPrefab",                           	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Load prefab from a file" };
public static ConsoleCommand Forge_MagnetAutogen                        	= new ConsoleCommand() { 	Name="Forge_MagnetAutogen",                        	Group="Forge",    	Command="Forge.MagnetAutogen",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Generates forge magnets from the collision model" };
public static ConsoleCommand Forge_Magnets                              	= new ConsoleCommand() { 	Name="Forge_Magnets",                              	Group="Forge",    	Command="Forge.Magnets",                              	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls whether magnets are enabled (1) or disabled (0)" };
public static ConsoleCommand Forge_MagnetsStrength                      	= new ConsoleCommand() { 	Name="Forge_MagnetsStrength",                      	Group="Forge",    	Command="Forge.MagnetsStrength",                      	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls the minimum distance at which magnets snap" };
public static ConsoleCommand Forge_MagnetsVisible                       	= new ConsoleCommand() { 	Name="Forge_MagnetsVisible",                       	Group="Forge",    	Command="Forge.MagnetsVisible",                       	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls whether magnets are shown (1) or hidden (0)" };
public static ConsoleCommand Forge_MapOptions                           	= new ConsoleCommand() { 	Name="Forge_MapOptions",                           	Group="Forge",    	Command="Forge.MapOptions",                           	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Opens map modifier object properties" };
public static ConsoleCommand Forge_MonitorNoclip                        	= new ConsoleCommand() { 	Name="Forge_MonitorNoclip",                        	Group="Forge",    	Command="Forge.MonitorNoclip",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Allows the monitor to pass through bsp and other objects" };
public static ConsoleCommand Forge_MonitorSpeed                         	= new ConsoleCommand() { 	Name="Forge_MonitorSpeed",                         	Group="Forge",    	Command="Forge.MonitorSpeed",                         	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls the movement speed of the monitor" };
public static ConsoleCommand Forge_Redo                                 	= new ConsoleCommand() { 	Name="Forge_Redo",                                 	Group="Forge",    	Command="Forge.Redo",                                 	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Redo the undone action" };
public static ConsoleCommand Forge_ResetRuntime                         	= new ConsoleCommand() { 	Name="Forge_ResetRuntime",                         	Group="Forge",    	Command="Forge.ResetRuntime",                         	 	Args = ArgType.None,                                   	Flags=Flag.Client|Flag.Server,             	Description="Respawn any abandoned/despawned objects" };
public static ConsoleCommand Forge_RotationSensitivity                  	= new ConsoleCommand() { 	Name="Forge_RotationSensitivity",                  	Group="Forge",    	Command="Forge.RotationSensitivity",                  	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls the sensitivity of object rotation" };
public static ConsoleCommand Forge_RotationSnap                         	= new ConsoleCommand() { 	Name="Forge_RotationSnap",                         	Group="Forge",    	Command="Forge.RotationSnap",                         	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Angle at which object rotation will be snapped" };
public static ConsoleCommand Forge_SavePrefab                           	= new ConsoleCommand() { 	Name="Forge_SavePrefab",                           	Group="Forge",    	Command="Forge.SavePrefab",                           	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Save prefab to a file" };
public static ConsoleCommand Forge_SelectAll                            	= new ConsoleCommand() { 	Name="Forge_SelectAll",                            	Group="Forge",    	Command="Forge.SelectAll",                            	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Select all objects that are the same as the object under the crosshair" };
public static ConsoleCommand Forge_SelectAllMaterial                    	= new ConsoleCommand() { 	Name="Forge_SelectAllMaterial",                    	Group="Forge",    	Command="Forge.SelectAllMaterial",                    	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Select all objects with the same material" };
public static ConsoleCommand Forge_SelectEverything                     	= new ConsoleCommand() { 	Name="Forge_SelectEverything",                     	Group="Forge",    	Command="Forge.SelectEverything",                     	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Select all objects on the map" };
public static ConsoleCommand Forge_SelectionColor                       	= new ConsoleCommand() { 	Name="Forge_SelectionColor",                       	Group="Forge",    	Command="Forge.SelectionColor",                       	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls the forge selection color" };
public static ConsoleCommand Forge_SelectionRenderer                    	= new ConsoleCommand() { 	Name="Forge_SelectionRenderer",                    	Group="Forge",    	Command="Forge.SelectionRenderer",                    	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Set the selection renderer to use" };
public static ConsoleCommand Forge_SetPrematchCamera                    	= new ConsoleCommand() { 	Name="Forge_SetPrematchCamera",                    	Group="Forge",    	Command="Forge.SetPrematchCamera",                    	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Set the position/orientation of the prematch camera" };
public static ConsoleCommand Forge_ShowInvisibles                       	= new ConsoleCommand() { 	Name="Forge_ShowInvisibles",                       	Group="Forge",    	Command="Forge.ShowInvisibles",                       	 	Args = ArgType.Boolean,                                	Flags=Flag.Client|Flag.Server,             	Description="When enabled forces invisible materials to be visible" };
public static ConsoleCommand Forge_ShowWorldBounds                      	= new ConsoleCommand() { 	Name="Forge_ShowWorldBounds",                      	Group="Forge",    	Command="Forge.ShowWorldBounds",                      	 	Args = ArgType.Boolean,                                	Flags=Flag.Client|Flag.Server,             	Description="Show the bsp world bounds" };
public static ConsoleCommand Forge_SpawnItem                            	= new ConsoleCommand() { 	Name="Forge_SpawnItem",                            	Group="Forge",    	Command="Forge.SpawnItem",                            	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Spawn an item from the forge palette" };
public static ConsoleCommand Forge_Undo                                 	= new ConsoleCommand() { 	Name="Forge_Undo",                                 	Group="Forge",    	Command="Forge.Undo",                                 	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Undo the last action" };
public static ConsoleCommand Game_CEFAtlasRendererEnable                	= new ConsoleCommand() { 	Name="Game_CEFAtlasRendererEnable",                	Group="Game",     	Command="Game.CEFAtlasRendererEnable",                	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Enables CEF Atlas path rendering" };
public static ConsoleCommand Game_CEFGpuEnable                          	= new ConsoleCommand() { 	Name="Game_CEFGpuEnable",                          	Group="Game",     	Command="Game.CEFGpuEnable",                          	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="0 = Disable CEF gpu acceleration / 1 = Enable CEF gpu acceleration" };
public static ConsoleCommand Game_CampaignMod                           	= new ConsoleCommand() { 	Name="Game_CampaignMod",                           	Group="Game",     	Command="Game.CampaignMod",                           	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="The filename of the mod to load on loading the campaign lobby" };
public static ConsoleCommand Game_ChatMessageLimit                      	= new ConsoleCommand() { 	Name="Game_ChatMessageLimit",                      	Group="Game",     	Command="Game.ChatMessageLimit",                      	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Sets the max limit for the number of messages in chat history that should be saved" };
public static ConsoleCommand Game_ChatURL                               	= new ConsoleCommand() { 	Name="Game_ChatURL",                               	Group="Game",     	Command="Game.ChatURL",                               	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="url(string) The URL of the page you want to load for the chat screen" };
public static ConsoleCommand Game_ConsoleURL                            	= new ConsoleCommand() { 	Name="Game_ConsoleURL",                            	Group="Game",     	Command="Game.ConsoleURL",                            	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="url(string) The URL of the page you want to load for the console screen" };
public static ConsoleCommand Game_DialogURL                             	= new ConsoleCommand() { 	Name="Game_DialogURL",                             	Group="Game",     	Command="Game.DialogURL",                             	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="url(string) The URL of the page you want to load for the dialog screen" };
public static ConsoleCommand Game_Discord_AutoAccept                    	= new ConsoleCommand() { 	Name="Game_Discord_AutoAccept",                    	Group="Game",     	Command="Game.Discord.AutoAccept",                    	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Server|Flag.Banned, 	Description="Allow auto accepting join requests" };
public static ConsoleCommand Game_Discord_Enable                        	= new ConsoleCommand() { 	Name="Game_Discord_Enable",                        	Group="Game",     	Command="Game.Discord.Enable",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Server|Flag.Banned, 	Description="Enable/disable discord integration" };
public static ConsoleCommand Game_DiscordURL                            	= new ConsoleCommand() { 	Name="Game_DiscordURL",                            	Group="Game",     	Command="Game.DiscordURL",                            	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="url(string) The URL of the page you want to load for the discord screen" };
public static ConsoleCommand Game_EmoteScreenURL                        	= new ConsoleCommand() { 	Name="Game_EmoteScreenURL",                        	Group="Game",     	Command="Game.EmoteScreenURL",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="url(string) The URL of the page you want to load for the emote screen" };
public static ConsoleCommand Game_End                                   	= new ConsoleCommand() { 	Name="Game_End",                                   	Group="Game",     	Command="Game.End",                                   	 	Args = ArgType.None,                                   	Flags=Flag.Client|Flag.Server,             	Description="Ends the game" };
public static ConsoleCommand Game_EndRound                              	= new ConsoleCommand() { 	Name="Game_EndRound",                              	Group="Game",     	Command="Game.EndRound",                              	 	Args = ArgType.None,                                   	Flags=Flag.Client|Flag.Server,             	Description="Ends the round" };
public static ConsoleCommand Game_Exit                                  	= new ConsoleCommand() { 	Name="Game_Exit",                                  	Group="Game",     	Command="Game.Exit",                                  	 	Args = ArgType.None,                                   	Flags=Flag.Client|Flag.Server|Flag.Banned, 	Description="Ends the game process" };
public static ConsoleCommand Game_ExpandedScoreboard                    	= new ConsoleCommand() { 	Name="Game_ExpandedScoreboard",                    	Group="Game",     	Command="Game.ExpandedScoreboard",                    	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Always show full scoreboard, instead of just while locked/postgame" };
public static ConsoleCommand Game_FirefightMod                          	= new ConsoleCommand() { 	Name="Game_FirefightMod",                          	Group="Game",     	Command="Game.FirefightMod",                          	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="The filename of the mod to load on loading the firefight lobby" };
public static ConsoleCommand Game_FirstRun                              	= new ConsoleCommand() { 	Name="Game_FirstRun",                              	Group="Game",     	Command="Game.FirstRun",                              	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Show the first run setup next time the game starts" };
public static ConsoleCommand Game_FontPackage                           	= new ConsoleCommand() { 	Name="Game_FontPackage",                           	Group="Game",     	Command="Game.FontPackage",                           	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="set the current font package path" };
public static ConsoleCommand Game_ForceLoad                             	= new ConsoleCommand() { 	Name="Game_ForceLoad",                             	Group="Game",     	Command="Game.ForceLoad",                             	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Server|Flag.Banned, 	Description="Forces a map to load" };
public static ConsoleCommand Game_ForgeObjectCreationURL                	= new ConsoleCommand() { 	Name="Game_ForgeObjectCreationURL",                	Group="Game",     	Command="Game.ForgeObjectCreationURL",                	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="url(string) The URL of the page you want to load for the forge_object_creation screen" };
public static ConsoleCommand Game_ForgeObjectPropertiesURL              	= new ConsoleCommand() { 	Name="Game_ForgeObjectPropertiesURL",              	Group="Game",     	Command="Game.ForgeObjectPropertiesURL",              	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="url(string) The URL of the page you want to load for the forge_object_properties screen" };
public static ConsoleCommand Game_GameType                              	= new ConsoleCommand() { 	Name="Game_GameType",                              	Group="Game",     	Command="Game.GameType",                              	 	Args = ArgType.VariantName,                            	Flags=Flag.Client|Flag.Server,             	Description="Loads a gametype" };
public static ConsoleCommand Game_HideChat                              	= new ConsoleCommand() { 	Name="Game_HideChat",                              	Group="Game",     	Command="Game.HideChat",                              	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Hide in-game chat screen" };
public static ConsoleCommand Game_InGameVotingURL                       	= new ConsoleCommand() { 	Name="Game_InGameVotingURL",                       	Group="Game",     	Command="Game.InGameVotingURL",                       	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="url(string) The URL of the page you want to load for the ingame_voting screen" };
public static ConsoleCommand Game_Info                                  	= new ConsoleCommand() { 	Name="Game_Info",                                  	Group="Game",     	Command="Game.Info",                                  	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Displays information about the game" };
public static ConsoleCommand Game_Language                              	= new ConsoleCommand() { 	Name="Game_Language",                              	Group="Game",     	Command="Game.Language",                              	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Server|Flag.Banned, 	Description="The language to use" };
public static ConsoleCommand Game_Leave                                 	= new ConsoleCommand() { 	Name="Game_Leave",                                 	Group="Game",     	Command="Game.Leave",                                 	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Leaves the game, goes back to menu" };
public static ConsoleCommand Game_ListMaps                              	= new ConsoleCommand() { 	Name="Game_ListMaps",                              	Group="Game",     	Command="Game.ListMaps",                              	 	Args = ArgType.None,                                   	Flags=Flag.Client|Flag.Server,             	Description="List all available map files" };
public static ConsoleCommand Game_LoadingURL                            	= new ConsoleCommand() { 	Name="Game_LoadingURL",                            	Group="Game",     	Command="Game.LoadingURL",                            	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="url(string) The URL of the page you want to load for the loading screen" };
public static ConsoleCommand Game_LogFilter                             	= new ConsoleCommand() { 	Name="Game_LogFilter",                             	Group="Game",     	Command="Game.LogFilter",                             	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Server|Flag.Banned, 	Description="Allows you to set filters to apply to the debug messages" };
public static ConsoleCommand Game_LogLevel                              	= new ConsoleCommand() { 	Name="Game_LogLevel",                              	Group="Game",     	Command="Game.LogLevel",                              	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Server|Flag.Banned, 	Description="Debug log verbosity level" };
public static ConsoleCommand Game_LogName                               	= new ConsoleCommand() { 	Name="Game_LogName",                               	Group="Game",     	Command="Game.LogName",                               	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Server|Flag.Banned, 	Description="Filename to store debug log messages" };
public static ConsoleCommand Game_LogTypes                              	= new ConsoleCommand() { 	Name="Game_LogTypes",                              	Group="Game",     	Command="Game.LogTypes",                              	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Server|Flag.Banned, 	Description="Chooses which kinds of debug messages to print to the log file" };
public static ConsoleCommand Game_MainMenuMod                           	= new ConsoleCommand() { 	Name="Game_MainMenuMod",                           	Group="Game",     	Command="Game.MainMenuMod",                           	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="The filename of the mod to load on the main menu" };
public static ConsoleCommand Game_Map                                   	= new ConsoleCommand() { 	Name="Game_Map",                                   	Group="Game",     	Command="Game.Map",                                   	 	Args = ArgType.MapName,                                	Flags=Flag.Client|Flag.Server,             	Description="Loads a map or map variant" };
public static ConsoleCommand Game_MenuURL                               	= new ConsoleCommand() { 	Name="Game_MenuURL",                               	Group="Game",     	Command="Game.MenuURL",                               	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="url(string) The URL of the page you want to load inside the menu" };
public static ConsoleCommand Game_MultiplayerMod                        	= new ConsoleCommand() { 	Name="Game_MultiplayerMod",                        	Group="Game",     	Command="Game.MultiplayerMod",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Server|Flag.Banned, 	Description="The filename of the mod to load on loading the Multiplayer lobby" };
public static ConsoleCommand Game_PlayerReportURL                       	= new ConsoleCommand() { 	Name="Game_PlayerReportURL",                       	Group="Game",     	Command="Game.PlayerReportURL",                       	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="url(string) The URL of the page you want to load for the report screen" };
public static ConsoleCommand Game_PrintScript                           	= new ConsoleCommand() { 	Name="Game_PrintScript",                           	Group="Game",     	Command="Game.PrintScript",                           	 	Args = ArgType.ScriptName,                             	Flags=Flag.Client|Flag.Server,             	Description="Prints information about a scenario script expression" };
public static ConsoleCommand Game_ProfileSettingsURL                    	= new ConsoleCommand() { 	Name="Game_ProfileSettingsURL",                    	Group="Game",     	Command="Game.ProfileSettingsURL",                    	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="url(string) The URL of the page you want to load for the profile_settings screen" };
public static ConsoleCommand Game_RconPort                              	= new ConsoleCommand() { 	Name="Game_RconPort",                              	Group="Game",     	Command="Game.RconPort",                              	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="The port to use for rcon in this instance of the game" };
public static ConsoleCommand Game_Restart                               	= new ConsoleCommand() { 	Name="Game_Restart",                               	Group="Game",     	Command="Game.Restart",                               	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Server|Flag.Banned, 	Description="Restart the game process" };
public static ConsoleCommand Game_ScenarioScript                        	= new ConsoleCommand() { 	Name="Game_ScenarioScript",                        	Group="Game",     	Command="Game.ScenarioScript",                        	 	Args = ArgType.ScriptName,                             	Flags=Flag.Client|Flag.Server,             	Description="Executes a scenario script" };
public static ConsoleCommand Game_ScoreboardURL                         	= new ConsoleCommand() { 	Name="Game_ScoreboardURL",                         	Group="Game",     	Command="Game.ScoreboardURL",                         	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="url(string) The URL of the page you want to load for the scoreboard screen" };
public static ConsoleCommand Game_ScreenshotNoticeDisabled              	= new ConsoleCommand() { 	Name="Game_ScreenshotNoticeDisabled",              	Group="Game",     	Command="Game.ScreenshotNoticeDisabled",              	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Disables the screenshot notifications" };
public static ConsoleCommand Game_ScreenshotNoticeURL                   	= new ConsoleCommand() { 	Name="Game_ScreenshotNoticeURL",                   	Group="Game",     	Command="Game.ScreenshotNoticeURL",                   	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="url(string) The URL of the page you want to load for the screenshot_notice screen" };
public static ConsoleCommand Game_ScreenshotsFolder                     	= new ConsoleCommand() { 	Name="Game_ScreenshotsFolder",                     	Group="Game",     	Command="Game.ScreenshotsFolder",                     	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="The location where the game will save screenshots" };
public static ConsoleCommand Game_ServerSettingsURL                     	= new ConsoleCommand() { 	Name="Game_ServerSettingsURL",                     	Group="Game",     	Command="Game.ServerSettingsURL",                     	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="url(string) The URL of the page you want to load for the server_settings screen" };
public static ConsoleCommand Game_SettingsURL                           	= new ConsoleCommand() { 	Name="Game_SettingsURL",                           	Group="Game",     	Command="Game.SettingsURL",                           	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="url(string) The URL of the page you want to load for the settings screen" };
public static ConsoleCommand Game_ShowLocalServersUI                    	= new ConsoleCommand() { 	Name="Game_ShowLocalServersUI",                    	Group="Game",     	Command="Game.ShowLocalServersUI",                    	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Opens the local server browser UI" };
public static ConsoleCommand Game_ShowModBrowser                        	= new ConsoleCommand() { 	Name="Game_ShowModBrowser",                        	Group="Game",     	Command="Game.ShowModBrowser",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Opens the mod browser UI with the correct lobby" };
public static ConsoleCommand Game_ShowModInfo                           	= new ConsoleCommand() { 	Name="Game_ShowModInfo",                           	Group="Game",     	Command="Game.ShowModInfo",                           	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Opens the mod info UI with details about the currently loaded mod" };
public static ConsoleCommand Game_ShowScreen                            	= new ConsoleCommand() { 	Name="Game_ShowScreen",                            	Group="Game",     	Command="Game.ShowScreen",                            	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Displays the specified screen" };
public static ConsoleCommand Game_ShowTickrate                          	= new ConsoleCommand() { 	Name="Game_ShowTickrate",                          	Group="Game",     	Command="Game.ShowTickrate",                          	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Toggle the on-screen Tickrate" };
public static ConsoleCommand Game_ShowUI                                	= new ConsoleCommand() { 	Name="Game_ShowUI",                                	Group="Game",     	Command="Game.ShowUI",                                	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Attempts to force a UI widget to open" };
public static ConsoleCommand Game_SkipIntroVideos                       	= new ConsoleCommand() { 	Name="Game_SkipIntroVideos",                       	Group="Game",     	Command="Game.SkipIntroVideos",                       	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Skip the game's intro videos." };
public static ConsoleCommand Game_SkipTitleSplash                       	= new ConsoleCommand() { 	Name="Game_SkipTitleSplash",                       	Group="Game",     	Command="Game.SkipTitleSplash",                       	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Skip the ElDewrito splash screen and go straight to the main menu" };
public static ConsoleCommand Game_Start                                 	= new ConsoleCommand() { 	Name="Game_Start",                                 	Group="Game",     	Command="Game.Start",                                 	 	Args = ArgType.None,                                   	Flags=Flag.Client|Flag.Server,             	Description="Starts or restarts the game" };
public static ConsoleCommand Game_StartCountdown                        	= new ConsoleCommand() { 	Name="Game_StartCountdown",                        	Group="Game",     	Command="Game.StartCountdown",                        	 	Args = ArgType.None,                                   	Flags=Flag.Client|Flag.Server,             	Description="Starts the game start countdown" };
public static ConsoleCommand Game_Stop                                  	= new ConsoleCommand() { 	Name="Game_Stop",                                  	Group="Game",     	Command="Game.Stop",                                  	 	Args = ArgType.None,                                   	Flags=Flag.Client|Flag.Server,             	Description="Stops the game, goes back to lobby" };
public static ConsoleCommand Game_TagAddress                            	= new ConsoleCommand() { 	Name="Game_TagAddress",                            	Group="Game",     	Command="Game.TagAddress",                            	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Server|Flag.Banned, 	Description="Gets the address of a tag in memory" };
public static ConsoleCommand Game_TakeScreenshot                        	= new ConsoleCommand() { 	Name="Game_TakeScreenshot",                        	Group="Game",     	Command="Game.TakeScreenshot",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Take a screenshot" };
public static ConsoleCommand Game_TickRate                              	= new ConsoleCommand() { 	Name="Game_TickRate",                              	Group="Game",     	Command="Game.TickRate",                              	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Set the game tick rate in seconds" };
public static ConsoleCommand Game_TitleURL                              	= new ConsoleCommand() { 	Name="Game_TitleURL",                              	Group="Game",     	Command="Game.TitleURL",                              	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="url(string) The URL of the page you want to load for the title screen" };
public static ConsoleCommand Game_Update                                	= new ConsoleCommand() { 	Name="Game_Update",                                	Group="Game",     	Command="Game.Update",                                	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Update the game to the latest version" };
public static ConsoleCommand Game_Version                               	= new ConsoleCommand() { 	Name="Game_Version",                               	Group="Game",     	Command="Game.Version",                               	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Displays the game's version" };
public static ConsoleCommand Game_VoipURL                               	= new ConsoleCommand() { 	Name="Game_VoipURL",                               	Group="Game",     	Command="Game.VoipURL",                               	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="url(string) The URL of the page you want to load for the voip screen" };
public static ConsoleCommand Game_VotingURL                             	= new ConsoleCommand() { 	Name="Game_VotingURL",                             	Group="Game",     	Command="Game.VotingURL",                             	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="url(string) The URL of the page you want to load for the voting screen" };
public static ConsoleCommand Game_WeaponOffsetURL                       	= new ConsoleCommand() { 	Name="Game_WeaponOffsetURL",                       	Group="Game",     	Command="Game.WeaponOffsetURL",                       	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="url(string) The URL of the page you want to load for the weapon_offset screen" };
public static ConsoleCommand Graphics_Bloom                             	= new ConsoleCommand() { 	Name="Graphics_Bloom",                             	Group="Graphics", 	Command="Graphics.Bloom",                             	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="The atmosphere bloom" };
public static ConsoleCommand Graphics_BlueHue                           	= new ConsoleCommand() { 	Name="Graphics_BlueHue",                           	Group="Graphics", 	Command="Graphics.BlueHue",                           	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="The blue hue" };
public static ConsoleCommand Graphics_CenteredHUD                       	= new ConsoleCommand() { 	Name="Graphics_CenteredHUD",                       	Group="Graphics", 	Command="Graphics.CenteredHUD",                       	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Center the HUD for ultrawide displays" };
public static ConsoleCommand Graphics_ContrailsEnabled                  	= new ConsoleCommand() { 	Name="Graphics_ContrailsEnabled",                  	Group="Graphics", 	Command="Graphics.ContrailsEnabled",                  	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Determines whether contrail systems are enabled." };
public static ConsoleCommand Graphics_CustomHUDColorsEnabled            	= new ConsoleCommand() { 	Name="Graphics_CustomHUDColorsEnabled",            	Group="Graphics", 	Command="Graphics.CustomHUDColorsEnabled",            	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Enables custom heads up display colors." };
public static ConsoleCommand Graphics_CustomHUDColorsPrimary            	= new ConsoleCommand() { 	Name="Graphics_CustomHUDColorsPrimary",            	Group="Graphics", 	Command="Graphics.CustomHUDColorsPrimary",            	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Change the primary custom HUD color." };
public static ConsoleCommand Graphics_CustomHUDColorsSecondary          	= new ConsoleCommand() { 	Name="Graphics_CustomHUDColorsSecondary",          	Group="Graphics", 	Command="Graphics.CustomHUDColorsSecondary",          	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Change the primary custom HUD color." };
public static ConsoleCommand Graphics_DecalsEnabled                     	= new ConsoleCommand() { 	Name="Graphics_DecalsEnabled",                     	Group="Graphics", 	Command="Graphics.DecalsEnabled",                     	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Determines whether decal systems are enabled." };
public static ConsoleCommand Graphics_DepthOfField                      	= new ConsoleCommand() { 	Name="Graphics_DepthOfField",                      	Group="Graphics", 	Command="Graphics.DepthOfField",                      	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="The camera's depth of field" };
public static ConsoleCommand Graphics_DisableContrails                  	= new ConsoleCommand() { 	Name="Graphics_DisableContrails",                  	Group="Graphics", 	Command="Graphics.DisableContrails",                  	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Disables the contrail renderer." };
public static ConsoleCommand Graphics_ForceDefaultLighting              	= new ConsoleCommand() { 	Name="Graphics_ForceDefaultLighting",              	Group="Graphics", 	Command="Graphics.ForceDefaultLighting",              	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="When disabled uses a single SH light probe for all lighting" };
public static ConsoleCommand Graphics_Gamma                             	= new ConsoleCommand() { 	Name="Graphics_Gamma",                             	Group="Graphics", 	Command="Graphics.Gamma",                             	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Global gamma. 3.6 is the default, 4.0 is equivalent to the gamma in previous versions of ElDewrito." };
public static ConsoleCommand Graphics_GreenHue                          	= new ConsoleCommand() { 	Name="Graphics_GreenHue",                          	Group="Graphics", 	Command="Graphics.GreenHue",                          	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="The green hue" };
public static ConsoleCommand Graphics_HUDScaleX                         	= new ConsoleCommand() { 	Name="Graphics_HUDScaleX",                         	Group="Graphics", 	Command="Graphics.HUDScaleX",                         	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="The HUD Scaling factor for the X axis" };
public static ConsoleCommand Graphics_Letterbox                         	= new ConsoleCommand() { 	Name="Graphics_Letterbox",                         	Group="Graphics", 	Command="Graphics.Letterbox",                         	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="A cinematic letterbox." };
public static ConsoleCommand Graphics_ParticlesEnabled                  	= new ConsoleCommand() { 	Name="Graphics_ParticlesEnabled",                  	Group="Graphics", 	Command="Graphics.ParticlesEnabled",                  	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Determines whether particle systems are enabled." };
public static ConsoleCommand Graphics_RedHue                            	= new ConsoleCommand() { 	Name="Graphics_RedHue",                            	Group="Graphics", 	Command="Graphics.RedHue",                            	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="The red hue" };
public static ConsoleCommand Graphics_ReflectionsEnabled                	= new ConsoleCommand() { 	Name="Graphics_ReflectionsEnabled",                	Group="Graphics", 	Command="Graphics.ReflectionsEnabled",                	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Determines whether reflections are enabled." };
public static ConsoleCommand Graphics_Saturation                        	= new ConsoleCommand() { 	Name="Graphics_Saturation",                        	Group="Graphics", 	Command="Graphics.Saturation",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="The saturation" };
public static ConsoleCommand Graphics_SupportedResolutions              	= new ConsoleCommand() { 	Name="Graphics_SupportedResolutions",              	Group="Graphics", 	Command="Graphics.SupportedResolutions",              	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="List the supported screen resolutions" };
public static ConsoleCommand Graphics_UIScaling                         	= new ConsoleCommand() { 	Name="Graphics_UIScaling",                         	Group="Graphics", 	Command="Graphics.UIScaling",                         	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Enables proper UI scaling to match your monitor's resolution." };
public static ConsoleCommand Input_Bind                                 	= new ConsoleCommand() { 	Name="Input_Bind",                                 	Group="Input",    	Command="Input.Bind",                                 	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Binds a command to a key" };
public static ConsoleCommand Input_ControllerAction                     	= new ConsoleCommand() { 	Name="Input_ControllerAction",                     	Group="Input",    	Command="Input.ControllerAction",                     	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Binds an in-game action to a controller button" };
public static ConsoleCommand Input_ControllerInvertY                    	= new ConsoleCommand() { 	Name="Input_ControllerInvertY",                    	Group="Input",    	Command="Input.ControllerInvertY",                    	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Invert the controller Y look axis" };
public static ConsoleCommand Input_ControllerPort                       	= new ConsoleCommand() { 	Name="Input_ControllerPort",                       	Group="Input",    	Command="Input.ControllerPort",                       	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="The port number of the player's controller." };
public static ConsoleCommand Input_ControllerSensitivityX               	= new ConsoleCommand() { 	Name="Input_ControllerSensitivityX",               	Group="Input",    	Command="Input.ControllerSensitivityX",               	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Horizontal controller look sensitivity" };
public static ConsoleCommand Input_ControllerSensitivityY               	= new ConsoleCommand() { 	Name="Input_ControllerSensitivityY",               	Group="Input",    	Command="Input.ControllerSensitivityY",               	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Vertical controller look sensitivity" };
public static ConsoleCommand Input_ControllerStickLayout                	= new ConsoleCommand() { 	Name="Input_ControllerStickLayout",                	Group="Input",    	Command="Input.ControllerStickLayout",                	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controller stick layout" };
public static ConsoleCommand Input_ControllerVibrationIntensity         	= new ConsoleCommand() { 	Name="Input_ControllerVibrationIntensity",         	Group="Input",    	Command="Input.ControllerVibrationIntensity",         	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls the controller vibration intensity" };
public static ConsoleCommand Input_ControllerVibrationTest              	= new ConsoleCommand() { 	Name="Input_ControllerVibrationTest",              	Group="Input",    	Command="Input.ControllerVibrationTest",              	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Test the controller vibration" };
public static ConsoleCommand Input_DirectInput                          	= new ConsoleCommand() { 	Name="Input_DirectInput",                          	Group="Input",    	Command="Input.DirectInput",                          	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Enables the DirectInput keyboard device" };
public static ConsoleCommand Input_DumpBindingsJson                     	= new ConsoleCommand() { 	Name="Input_DumpBindingsJson",                     	Group="Input",    	Command="Input.DumpBindingsJson",                     	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Dumps the input bindings table in json" };
public static ConsoleCommand Input_FindBind                             	= new ConsoleCommand() { 	Name="Input_FindBind",                             	Group="Input",    	Command="Input.FindBind",                             	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Finds the key bound to a command passed" };
public static ConsoleCommand Input_KeyboardAction                       	= new ConsoleCommand() { 	Name="Input_KeyboardAction",                       	Group="Input",    	Command="Input.KeyboardAction",                       	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Binds an in-game action to keyboard keys or mouse buttons" };
public static ConsoleCommand Input_MouseWheelCooldown                   	= new ConsoleCommand() { 	Name="Input_MouseWheelCooldown",                   	Group="Input",    	Command="Input.MouseWheelCooldown",                   	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Time between consecutive mouse wheel inputs in milliseconds" };
public static ConsoleCommand Input_RawInput                             	= new ConsoleCommand() { 	Name="Input_RawInput",                             	Group="Input",    	Command="Input.RawInput",                             	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Enables raw mouse input with no acceleration applied" };
public static ConsoleCommand Input_ResetBindings                        	= new ConsoleCommand() { 	Name="Input_ResetBindings",                        	Group="Input",    	Command="Input.ResetBindings",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Restores default bindings" };
public static ConsoleCommand Input_SmartScoreboard                      	= new ConsoleCommand() { 	Name="Input_SmartScoreboard",                      	Group="Input",    	Command="Input.SmartScoreboard",                      	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Enable for smarter scoreboard locking" };
public static ConsoleCommand Input_SpectateSensitivity                  	= new ConsoleCommand() { 	Name="Input_SpectateSensitivity",                  	Group="Input",    	Command="Input.SpectateSensitivity",                  	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Spectator camera sensitivity" };
public static ConsoleCommand Input_TapScoreboard                        	= new ConsoleCommand() { 	Name="Input_TapScoreboard",                        	Group="Input",    	Command="Input.TapScoreboard",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Enable/disable double tap to lock scoreboard" };
public static ConsoleCommand Input_ToggleSprint                         	= new ConsoleCommand() { 	Name="Input_ToggleSprint",                         	Group="Input",    	Command="Input.ToggleSprint",                         	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Sprint toggle enabled (1) or disabled (0)" };
public static ConsoleCommand Player_AlertCarry                          	= new ConsoleCommand() { 	Name="Player_AlertCarry",                          	Group="Player",   	Command="Player.AlertCarry",                          	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Toggle the alert carry pose" };
public static ConsoleCommand Player_Emblem                              	= new ConsoleCommand() { 	Name="Player_Emblem",                              	Group="Player",   	Command="Player.Emblem",                              	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Player Emblem url" };
public static ConsoleCommand Player_Emote                               	= new ConsoleCommand() { 	Name="Player_Emote",                               	Group="Player",   	Command="Player.Emote",                               	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Starts an emote" };
public static ConsoleCommand Player_Gender                              	= new ConsoleCommand() { 	Name="Player_Gender",                              	Group="Player",   	Command="Player.Gender",                              	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="The players gender" };
public static ConsoleCommand Player_Kill                                	= new ConsoleCommand() { 	Name="Player_Kill",                                	Group="Player",   	Command="Player.Kill",                                	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Kills the player that runs the command" };
public static ConsoleCommand Player_Name                                	= new ConsoleCommand() { 	Name="Player_Name",                                	Group="Player",   	Command="Player.Name",                                	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="The players ingame name" };
public static ConsoleCommand Player_Nameplate                           	= new ConsoleCommand() { 	Name="Player_Nameplate",                           	Group="Player",   	Command="Player.Nameplate",                           	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Index for the nameplate in the lobby" };
public static ConsoleCommand Player_NameplateColor                      	= new ConsoleCommand() { 	Name="Player_NameplateColor",                      	Group="Player",   	Command="Player.NameplateColor",                      	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Color for the nameplate in the lobby" };
public static ConsoleCommand Player_PrintUID                            	= new ConsoleCommand() { 	Name="Player_PrintUID",                            	Group="Player",   	Command="Player.PrintUID",                            	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Prints the players UID" };
public static ConsoleCommand Player_ServiceTag                          	= new ConsoleCommand() { 	Name="Player_ServiceTag",                          	Group="Player",   	Command="Player.ServiceTag",                          	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="The players service tag" };
public static ConsoleCommand Script_PrintToConsole                      	= new ConsoleCommand() { 	Name="Script_PrintToConsole",                      	Group="Script",   	Command="Script.PrintToConsole",                      	 	Args = ArgType.None,                                   	Flags=Flag.Client|Flag.Server,             	Description="Logs hsc print to the console" };
public static ConsoleCommand Server_AddBan                              	= new ConsoleCommand() { 	Name="Server_AddBan",                              	Group="Server",   	Command="Server.AddBan",                              	 	Args = ArgType.PlayerName,                             	Flags=Flag.Server,                         	Description="Adds to the ban list (does NOT kick anyone)" };
public static ConsoleCommand Server_Announce                            	= new ConsoleCommand() { 	Name="Server_Announce",                            	Group="Server",   	Command="Server.Announce",                            	 	Args = ArgType.Boolean,                                	Flags=Flag.Server,                         	Description="Announces this server to the master servers" };
public static ConsoleCommand Server_AssassinationEnabled                	= new ConsoleCommand() { 	Name="Server_AssassinationEnabled",                	Group="Server",   	Command="Server.AssassinationEnabled",                	 	Args = ArgType.Boolean,                                	Flags=Flag.Server,                         	Description="Controls whether assassinations are enabled on the server" };
public static ConsoleCommand Server_BanListSyncIntervalSeconds          	= new ConsoleCommand() { 	Name="Server_BanListSyncIntervalSeconds",          	Group="Server",   	Command="Server.BanListSyncIntervalSeconds",          	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="The interval at which banlists synced and enforced" };
public static ConsoleCommand Server_BottomlessClipEnabled               	= new ConsoleCommand() { 	Name="Server_BottomlessClipEnabled",               	Group="Server",   	Command="Server.BottomlessClipEnabled",               	 	Args = ArgType.Boolean,                                	Flags=Flag.Server,                         	Description="Controls whether bottomless clip is enabled on the server" };
public static ConsoleCommand Server_ChatCommandEndGameEnabled           	= new ConsoleCommand() { 	Name="Server_ChatCommandEndGameEnabled",           	Group="Server",   	Command="Server.ChatCommandEndGameEnabled",           	 	Args = ArgType.Boolean,                                	Flags=Flag.Server,                         	Description="Controls whether or not players can vote to end the game." };
public static ConsoleCommand Server_ChatCommandEndRoundEnabled          	= new ConsoleCommand() { 	Name="Server_ChatCommandEndRoundEnabled",          	Group="Server",   	Command="Server.ChatCommandEndRoundEnabled",          	 	Args = ArgType.Boolean,                                	Flags=Flag.Server,                         	Description="Controls whether or not players can vote to end the round." };
public static ConsoleCommand Server_ChatCommandKickPlayerEnabled        	= new ConsoleCommand() { 	Name="Server_ChatCommandKickPlayerEnabled",        	Group="Server",   	Command="Server.ChatCommandKickPlayerEnabled",        	 	Args = ArgType.Boolean,                                	Flags=Flag.Server,                         	Description="Controls whether or not players can vote to kick someone." };
public static ConsoleCommand Server_ChatCommandShuffleTeamsEnabled      	= new ConsoleCommand() { 	Name="Server_ChatCommandShuffleTeamsEnabled",      	Group="Server",   	Command="Server.ChatCommandShuffleTeamsEnabled",      	 	Args = ArgType.Boolean,                                	Flags=Flag.Server,                         	Description="Controls whether or not players can vote to shuffle the teams." };
public static ConsoleCommand Server_ChatCommandVoteTime                 	= new ConsoleCommand() { 	Name="Server_ChatCommandVoteTime",                 	Group="Server",   	Command="Server.ChatCommandVoteTime",                 	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server,                         	Description="The number of seconds a chat command vote lasts" };
public static ConsoleCommand Server_ChatLogEnabled                      	= new ConsoleCommand() { 	Name="Server_ChatLogEnabled",                      	Group="Server",   	Command="Server.ChatLogEnabled",                      	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="Controls whether chat logging is enabled" };
public static ConsoleCommand Server_ChatLogFile                         	= new ConsoleCommand() { 	Name="Server_ChatLogFile",                         	Group="Server",   	Command="Server.ChatLogFile",                         	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="Sets the name of the file to log chat to" };
public static ConsoleCommand Server_ClearTempBans                       	= new ConsoleCommand() { 	Name="Server_ClearTempBans",                       	Group="Server",   	Command="Server.ClearTempBans",                       	 	Args = ArgType.None,                                   	Flags=Flag.Server,                         	Description="clears the temp ban list" };
public static ConsoleCommand Server_Connect                             	= new ConsoleCommand() { 	Name="Server_Connect",                             	Group="Server",   	Command="Server.Connect",                             	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Begins establishing a connection to a server" };
public static ConsoleCommand Server_Countdown                           	= new ConsoleCommand() { 	Name="Server_Countdown",                           	Group="Server",   	Command="Server.Countdown",                           	 	Args = ArgType.NumericRange, RangeMin=0, RangeMax=20,  	Flags=Flag.Server,                         	Description="The number of seconds to wait at the start of the game, 0 - 20" };
public static ConsoleCommand Server_CountdownLobby                      	= new ConsoleCommand() { 	Name="Server_CountdownLobby",                      	Group="Server",   	Command="Server.CountdownLobby",                      	 	Args = ArgType.NumericRange, RangeMin=0, RangeMax=20,  	Flags=Flag.Server,                         	Description="The number of seconds to wait in the lobby before the game starts, 0 - 20" };
public static ConsoleCommand Server_Dedicated                           	= new ConsoleCommand() { 	Name="Server_Dedicated",                           	Group="Server",   	Command="Server.Dedicated",                           	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Server|Flag.Banned, 	Description="Used only to let clients know if the server is dedicated or not" };
public static ConsoleCommand Server_DualWieldEnabled                    	= new ConsoleCommand() { 	Name="Server_DualWieldEnabled",                    	Group="Server",   	Command="Server.DualWieldEnabled",                    	 	Args = ArgType.Boolean,                                	Flags=Flag.Server,                         	Description="Controls whether dual wielding is enabled on the server" };
public static ConsoleCommand Server_EmotesDuringPodiumEnabled           	= new ConsoleCommand() { 	Name="Server_EmotesDuringPodiumEnabled",           	Group="Server",   	Command="Server.EmotesDuringPodiumEnabled",           	 	Args = ArgType.Boolean,                                	Flags=Flag.Server,                         	Description="Controls whether players can use emotes during podium" };
public static ConsoleCommand Server_EmotesEnabled                       	= new ConsoleCommand() { 	Name="Server_EmotesEnabled",                       	Group="Server",   	Command="Server.EmotesEnabled",                       	 	Args = ArgType.Boolean,                                	Flags=Flag.Server,                         	Description="Controls whether players can use emotes" };
public static ConsoleCommand Server_FileServerEnabled                   	= new ConsoleCommand() { 	Name="Server_FileServerEnabled",                   	Group="Server",   	Command="Server.FileServerEnabled",                   	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="Enable/Disable local file server (for serving mod packages)" };
public static ConsoleCommand Server_FileServerPort                      	= new ConsoleCommand() { 	Name="Server_FileServerPort",                      	Group="Server",   	Command="Server.FileServerPort",                      	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="The port number used by the file server (for serving mod packages)" };
public static ConsoleCommand Server_FloodFilterEnabled                  	= new ConsoleCommand() { 	Name="Server_FloodFilterEnabled",                  	Group="Server",   	Command="Server.FloodFilterEnabled",                  	 	Args = ArgType.Boolean,                                	Flags=Flag.Server,                         	Description="Controls whether chat flood filtering is enabled" };
public static ConsoleCommand Server_FloodMessageScoreLong               	= new ConsoleCommand() { 	Name="Server_FloodMessageScoreLong",               	Group="Server",   	Command="Server.FloodMessageScoreLong",               	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server,                         	Description="Sets the flood filter score for long messages" };
public static ConsoleCommand Server_FloodMessageScoreShort              	= new ConsoleCommand() { 	Name="Server_FloodMessageScoreShort",              	Group="Server",   	Command="Server.FloodMessageScoreShort",              	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server,                         	Description="Sets the flood filter score for short messages" };
public static ConsoleCommand Server_FloodTimeoutResetSeconds            	= new ConsoleCommand() { 	Name="Server_FloodTimeoutResetSeconds",            	Group="Server",   	Command="Server.FloodTimeoutResetSeconds",            	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server,                         	Description="Sets the period in seconds before a spammer's next timeout is reset" };
public static ConsoleCommand Server_FloodTimeoutScore                   	= new ConsoleCommand() { 	Name="Server_FloodTimeoutScore",                   	Group="Server",   	Command="Server.FloodTimeoutScore",                   	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server,                         	Description="Sets the flood filter score that triggers a timeout" };
public static ConsoleCommand Server_FloodTimeoutSeconds                 	= new ConsoleCommand() { 	Name="Server_FloodTimeoutSeconds",                 	Group="Server",   	Command="Server.FloodTimeoutSeconds",                 	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server,                         	Description="Sets the timeout period in seconds before a spammer can send messages again" };
public static ConsoleCommand Server_GamePort                            	= new ConsoleCommand() { 	Name="Server_GamePort",                            	Group="Server",   	Command="Server.GamePort",                            	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="The port number used by Halo Online" };
public static ConsoleCommand Server_HUDWaypointStyle                    	= new ConsoleCommand() { 	Name="Server_HUDWaypointStyle",                    	Group="Server",   	Command="Server.HUDWaypointStyle",                    	 	Args = ArgType.Boolean,                                	Flags=Flag.Server,                         	Description="0 = Halo Online, 1 = Halo 3" };
public static ConsoleCommand Server_HitMarkersEnabled                   	= new ConsoleCommand() { 	Name="Server_HitMarkersEnabled",                   	Group="Server",   	Command="Server.HitMarkersEnabled",                   	 	Args = ArgType.Boolean,                                	Flags=Flag.Server,                         	Description="Controls whether or not hitmarkers are enabled on this server" };
public static ConsoleCommand Server_Http_CacheTime                      	= new ConsoleCommand() { 	Name="Server_Http_CacheTime",                      	Group="Server",   	Command="Server.Http.CacheTime",                      	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="Time in seconds the server should cache the http server response" };
public static ConsoleCommand Server_KickBan                             	= new ConsoleCommand() { 	Name="Server_KickBan",                             	Group="Server",   	Command="Server.KickBan",                             	 	Args = ArgType.PlayerName,                             	Flags=Flag.Server,                         	Description="Adds to the ban list and kicks the player" };
public static ConsoleCommand Server_KickBanIndex                        	= new ConsoleCommand() { 	Name="Server_KickBanIndex",                        	Group="Server",   	Command="Server.KickBanIndex",                        	 	Args = ArgType.PlayerIndex,                            	Flags=Flag.Server,                         	Description="Kicks and IP bans a player from the game by index (host only)" };
public static ConsoleCommand Server_KickBanPlayer                       	= new ConsoleCommand() { 	Name="Server_KickBanPlayer",                       	Group="Server",   	Command="Server.KickBanPlayer",                       	 	Args = ArgType.PlayerName,                             	Flags=Flag.Server,                         	Description="Kicks and IP bans a player from the game by name (host only)" };
public static ConsoleCommand Server_KickBanUid                          	= new ConsoleCommand() { 	Name="Server_KickBanUid",                          	Group="Server",   	Command="Server.KickBanUid",                          	 	Args = ArgType.PlayerUid,                              	Flags=Flag.Server,                         	Description="Kicks and IP bans players from the game by UID (host only)" };
public static ConsoleCommand Server_KickIndex                           	= new ConsoleCommand() { 	Name="Server_KickIndex",                           	Group="Server",   	Command="Server.KickIndex",                           	 	Args = ArgType.PlayerIndex,                            	Flags=Flag.Server,                         	Description="Kicks a player from the game by index (host only)" };
public static ConsoleCommand Server_KickPlayer                          	= new ConsoleCommand() { 	Name="Server_KickPlayer",                          	Group="Server",   	Command="Server.KickPlayer",                          	 	Args = ArgType.PlayerName,                             	Flags=Flag.Server,                         	Description="Kicks a player from the game by name (host only)" };
public static ConsoleCommand Server_KickTempBanPlayer                   	= new ConsoleCommand() { 	Name="Server_KickTempBanPlayer",                   	Group="Server",   	Command="Server.KickTempBanPlayer",                   	 	Args = ArgType.PlayerName,                             	Flags=Flag.Server,                         	Description="Kicks and temporarily IP bans a player from the game by name (host only)" };
public static ConsoleCommand Server_KickTempBanUid                      	= new ConsoleCommand() { 	Name="Server_KickTempBanUid",                      	Group="Server",   	Command="Server.KickTempBanUid",                      	 	Args = ArgType.PlayerUid,                              	Flags=Flag.Server,                         	Description="Kicks and temporarily IP bans players from the game by UID (host only)" };
public static ConsoleCommand Server_KickUid                             	= new ConsoleCommand() { 	Name="Server_KickUid",                             	Group="Server",   	Command="Server.KickUid",                             	 	Args = ArgType.PlayerUid,                              	Flags=Flag.Server,                         	Description="Kicks players from the game by UID (host only)" };
public static ConsoleCommand Server_KillCommandDuringPodiumEnabled      	= new ConsoleCommand() { 	Name="Server_KillCommandDuringPodiumEnabled",      	Group="Server",   	Command="Server.KillCommandDuringPodiumEnabled",      	 	Args = ArgType.Boolean,                                	Flags=Flag.Server,                         	Description="Controls whether players can use the kill during the end game podium" };
public static ConsoleCommand Server_KillCommandEnabled                  	= new ConsoleCommand() { 	Name="Server_KillCommandEnabled",                  	Group="Server",   	Command="Server.KillCommandEnabled",                  	 	Args = ArgType.Boolean,                                	Flags=Flag.Server,                         	Description="Controls whether players can use the kill" };
public static ConsoleCommand Server_KillCommandMessage                  	= new ConsoleCommand() { 	Name="Server_KillCommandMessage",                  	Group="Server",   	Command="Server.KillCommandMessage",                  	 	Args = ArgType.QuotedString,                           	Flags=Flag.Server,                         	Description="Sets the message that is sent when a user uses the kill command" };
public static ConsoleCommand Server_ListPlayers                         	= new ConsoleCommand() { 	Name="Server_ListPlayers",                         	Group="Server",   	Command="Server.ListPlayers",                         	 	Args = ArgType.None,                                   	Flags=Flag.Server,                         	Description="Lists players in the game" };
public static ConsoleCommand Server_ListPlayersLogEnabled               	= new ConsoleCommand() { 	Name="Server_ListPlayersLogEnabled",               	Group="Server",   	Command="Server.ListPlayersLogEnabled",               	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="Controls whether player list logging is enabled" };
public static ConsoleCommand Server_ListPlayersLogFile                  	= new ConsoleCommand() { 	Name="Server_ListPlayersLogFile",                  	Group="Server",   	Command="Server.ListPlayersLogFile",                  	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="Sets the name of the file to log player lists to" };
public static ConsoleCommand Server_ListTempBans                        	= new ConsoleCommand() { 	Name="Server_ListTempBans",                        	Group="Server",   	Command="Server.ListTempBans",                        	 	Args = ArgType.None,                                   	Flags=Flag.Server,                         	Description="List all ips that have a temporary ban" };
public static ConsoleCommand Server_LobbyType                           	= new ConsoleCommand() { 	Name="Server_LobbyType",                           	Group="Server",   	Command="Server.LobbyType",                           	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="Changes the lobby type for the server. 0 = Campaign; 1 = Matchmaking; 2 = Multiplayer; 3 = Forge; 4 = Theater;" };
public static ConsoleCommand Server_MaxPlayers                          	= new ConsoleCommand() { 	Name="Server_MaxPlayers",                          	Group="Server",   	Command="Server.MaxPlayers",                          	 	Args = ArgType.NumericRange, RangeMin=1, RangeMax=16,  	Flags=Flag.Server,                         	Description="Maximum number of connected players, 1 - 16" };
public static ConsoleCommand Server_Message                             	= new ConsoleCommand() { 	Name="Server_Message",                             	Group="Server",   	Command="Server.Message",                             	 	Args = ArgType.QuotedString,                           	Flags=Flag.Server,                         	Description="Text to display on the loading screen (limited to 512 chars)" };
public static ConsoleCommand Server_Mod                                 	= new ConsoleCommand() { 	Name="Server_Mod",                                 	Group="Server",   	Command="Server.Mod",                                 	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="Sets the current tag mod" };
public static ConsoleCommand Server_Mode                                	= new ConsoleCommand() { 	Name="Server_Mode",                                	Group="Server",   	Command="Server.Mode",                                	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="Changes the network mode for the server. 0 = Xbox Live (Open Party); 1 = Xbox Live (Friends Only); 2 = Xbox Live (Invite Only); 3 = Online; 4 = Offline;" };
public static ConsoleCommand Server_ModsJsonFile                        	= new ConsoleCommand() { 	Name="Server_ModsJsonFile",                        	Group="Server",   	Command="Server.ModsJsonFile",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="Sets the path to the mods.json file for automatic mod downloads on boot" };
public static ConsoleCommand Server_MutePlayer                          	= new ConsoleCommand() { 	Name="Server_MutePlayer",                          	Group="Server",   	Command="Server.MutePlayer",                          	 	Args = ArgType.PlayerName,                             	Flags=Flag.Server,                         	Description="Mutes Player from Chat" };
public static ConsoleCommand Server_MuteSoundsDuringPostGame            	= new ConsoleCommand() { 	Name="Server_MuteSoundsDuringPostGame",            	Group="Server",   	Command="Server.MuteSoundsDuringPostGame",            	 	Args = ArgType.Boolean,                                	Flags=Flag.Server,                         	Description="Controls whether the game will mute sounds during the post game time" };
public static ConsoleCommand Server_Name                                	= new ConsoleCommand() { 	Name="Server_Name",                                	Group="Server",   	Command="Server.Name",                                	 	Args = ArgType.QuotedString,                           	Flags=Flag.Server,                         	Description="The name of the server (limited to 128 characters)" };
public static ConsoleCommand Server_NearVictoryMusicEnabled             	= new ConsoleCommand() { 	Name="Server_NearVictoryMusicEnabled",             	Group="Server",   	Command="Server.NearVictoryMusicEnabled",             	 	Args = ArgType.Boolean,                                	Flags=Flag.Server,                         	Description="controls if music should start to play in a match based on the scores of the match" };
public static ConsoleCommand Server_NearVictoryMusicPercentage          	= new ConsoleCommand() { 	Name="Server_NearVictoryMusicPercentage",          	Group="Server",   	Command="Server.NearVictoryMusicPercentage",          	 	Args = ArgType.NumericRange, RangeMin=0, RangeMax=100, 	Flags=Flag.Server,                         	Description="controls when music should start to play in a match based on the required score_to_win for the gametype. 0 = disabled" };
public static ConsoleCommand Server_NumberOfTeams                       	= new ConsoleCommand() { 	Name="Server_NumberOfTeams",                       	Group="Server",   	Command="Server.NumberOfTeams",                       	 	Args = ArgType.NumericRange, RangeMin=1, RangeMax=8,   	Flags=Flag.Server,                         	Description="Set the desired number of teams, 1 - 8" };
public static ConsoleCommand Server_PM                                  	= new ConsoleCommand() { 	Name="Server_PM",                                  	Group="Server",   	Command="Server.PM",                                  	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server,                         	Description="Sends a pm to a player as the server. First argument is the player name, second is the message in quotes" };
public static ConsoleCommand Server_Password                            	= new ConsoleCommand() { 	Name="Server_Password",                            	Group="Server",   	Command="Server.Password",                            	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="The server password" };
public static ConsoleCommand Server_Ping                                	= new ConsoleCommand() { 	Name="Server_Ping",                                	Group="Server",   	Command="Server.Ping",                                	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="Ping a server" };
public static ConsoleCommand Server_PlayersInfo                         	= new ConsoleCommand() { 	Name="Server_PlayersInfo",                         	Group="Server",   	Command="Server.PlayersInfo",                         	 	Args = ArgType.None,                                   	Flags=Flag.Server,                         	Description="Emblem and Rank info for each player" };
public static ConsoleCommand Server_PlayersPingInfo                     	= new ConsoleCommand() { 	Name="Server_PlayersPingInfo",                     	Group="Server",   	Command="Server.PlayersPingInfo",                     	 	Args = ArgType.None,                                   	Flags=Flag.Server,                         	Description="ping info for each player" };
public static ConsoleCommand Server_PodiumEnabled                       	= new ConsoleCommand() { 	Name="Server_PodiumEnabled",                       	Group="Server",   	Command="Server.PodiumEnabled",                       	 	Args = ArgType.Boolean,                                	Flags=Flag.Server,                         	Description="should run podium hsc script at game finish. 0 = Disabled; 1 = Enabled; 2 = Forged maps Only (When podium was placed on a forged map)" };
public static ConsoleCommand Server_PodiumEnabledDuringForge            	= new ConsoleCommand() { 	Name="Server_PodiumEnabledDuringForge",            	Group="Server",   	Command="Server.PodiumEnabledDuringForge",            	 	Args = ArgType.Boolean,                                	Flags=Flag.Server,                         	Description="should run podium hsc script in forge at game finish" };
public static ConsoleCommand Server_Port                                	= new ConsoleCommand() { 	Name="Server_Port",                                	Group="Server",   	Command="Server.Port",                                	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="The port number the HTTP server runs on, the game uses Server.GamePort" };
public static ConsoleCommand Server_PostGameFadeStartDelay              	= new ConsoleCommand() { 	Name="Server_PostGameFadeStartDelay",              	Group="Server",   	Command="Server.PostGameFadeStartDelay",              	 	Args = ArgType.NumericRange, RangeMin=0, RangeMax=40,  	Flags=Flag.Server,                         	Description="Time in seconds from game over to start fading to black" };
public static ConsoleCommand Server_PostGameTimeSeconds                 	= new ConsoleCommand() { 	Name="Server_PostGameTimeSeconds",                 	Group="Server",   	Command="Server.PostGameTimeSeconds",                 	 	Args = ArgType.NumericRange, RangeMin=0, RangeMax=40,  	Flags=Flag.Server,                         	Description="Time in seconds from game over to return to lobby" };
public static ConsoleCommand Server_PostMatchMusicEnabled               	= new ConsoleCommand() { 	Name="Server_PostMatchMusicEnabled",               	Group="Server",   	Command="Server.PostMatchMusicEnabled",               	 	Args = ArgType.Boolean,                                	Flags=Flag.Server,                         	Description="Controls whether the postmatch music will play during podium/postmatch time" };
public static ConsoleCommand Server_RconConsoleOutputEnabled            	= new ConsoleCommand() { 	Name="Server_RconConsoleOutputEnabled",            	Group="Server",   	Command="Server.RconConsoleOutputEnabled",            	 	Args = ArgType.Boolean,                                	Flags=Flag.Server|Flag.Banned,             	Description="Controls whether the console ouput of the server is forwarded out through rcon" };
public static ConsoleCommand Server_RconLogEnabled                      	= new ConsoleCommand() { 	Name="Server_RconLogEnabled",                      	Group="Server",   	Command="Server.RconLogEnabled",                      	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="Controls whether rcon logging is enabled" };
public static ConsoleCommand Server_RconLogFile                         	= new ConsoleCommand() { 	Name="Server_RconLogFile",                         	Group="Server",   	Command="Server.RconLogFile",                         	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="Sets the name of the file to log rcon messages to" };
public static ConsoleCommand Server_RconPassword                        	= new ConsoleCommand() { 	Name="Server_RconPassword",                        	Group="Server",   	Command="Server.RconPassword",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="Password for the remote console" };
public static ConsoleCommand Server_RefreshMods                         	= new ConsoleCommand() { 	Name="Server_RefreshMods",                         	Group="Server",   	Command="Server.RefreshMods",                         	 	Args = ArgType.None,                                   	Flags=Flag.Server,                         	Description="Searches for mods in the mods directory" };
public static ConsoleCommand Server_RemoveTempBan                       	= new ConsoleCommand() { 	Name="Server_RemoveTempBan",                       	Group="Server",   	Command="Server.RemoveTempBan",                       	 	Args = ArgType.PlayerIndex,                            	Flags=Flag.Server,                         	Description="Removes a player by index from the temp ban list" };
public static ConsoleCommand Server_ReturnToLobbyTimeout                	= new ConsoleCommand() { 	Name="Server_ReturnToLobbyTimeout",                	Group="Server",   	Command="Server.ReturnToLobbyTimeout",                	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="Controls the maximum duration of blackscreens postgame, default 10" };
public static ConsoleCommand Server_Say                                 	= new ConsoleCommand() { 	Name="Server_Say",                                 	Group="Server",   	Command="Server.Say",                                 	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server,                         	Description="Sends a chat message as the server" };
public static ConsoleCommand Server_SendChatToRconClients               	= new ConsoleCommand() { 	Name="Server_SendChatToRconClients",               	Group="Server",   	Command="Server.SendChatToRconClients",               	 	Args = ArgType.Boolean,                                	Flags=Flag.Server|Flag.Banned,             	Description="Controls whether or not chat should be sent through rcon" };
public static ConsoleCommand Server_ShouldAnnounce                      	= new ConsoleCommand() { 	Name="Server_ShouldAnnounce",                      	Group="Server",   	Command="Server.ShouldAnnounce",                      	 	Args = ArgType.Boolean,                                	Flags=Flag.Server|Flag.Banned,             	Description="Controls whether the server will be announced to the master servers" };
public static ConsoleCommand Server_ShouldSubmitStats                   	= new ConsoleCommand() { 	Name="Server_ShouldSubmitStats",                   	Group="Server",   	Command="Server.ShouldSubmitStats",                   	 	Args = ArgType.Boolean,                                	Flags=Flag.Server|Flag.Banned,             	Description="Sets whether the server should ever submit stats to the stats servers" };
public static ConsoleCommand Server_ShowDisconnectedPlayers             	= new ConsoleCommand() { 	Name="Server_ShowDisconnectedPlayers",             	Group="Server",   	Command="Server.ShowDisconnectedPlayers",             	 	Args = ArgType.Boolean,                                	Flags=Flag.Server|Flag.Banned,             	Description="Show disconnected players in the scoreboard" };
public static ConsoleCommand Server_ShowPlayerPing                      	= new ConsoleCommand() { 	Name="Server_ShowPlayerPing",                      	Group="Server",   	Command="Server.ShowPlayerPing",                      	 	Args = ArgType.Boolean,                                	Flags=Flag.Server,                         	Description="Controls whether the game will show ping on client scoreboards" };
public static ConsoleCommand Server_ShuffleTeams                        	= new ConsoleCommand() { 	Name="Server_ShuffleTeams",                        	Group="Server",   	Command="Server.ShuffleTeams",                        	 	Args = ArgType.None,                                   	Flags=Flag.Server,                         	Description="Evenly distributes players between the red and blue teams" };
public static ConsoleCommand Server_SignalServerPort                    	= new ConsoleCommand() { 	Name="Server_SignalServerPort",                    	Group="Server",   	Command="Server.SignalServerPort",                    	 	Args = ArgType.Unmapped,                               	Flags=Flag.Server|Flag.Banned,             	Description="The port the signaling server will listen on" };
public static ConsoleCommand Server_Sprint                              	= new ConsoleCommand() { 	Name="Server_Sprint",                              	Group="Server",   	Command="Server.Sprint",                              	 	Args = ArgType.NumericRange, RangeMin=0, RangeMax=2,   	Flags=Flag.Server,                         	Description="Controls whether sprint is enabled on the server. 0 = Disabled Globally; 1 = Enabled Globally; 2 = Inherited by gametype settings;" };
public static ConsoleCommand Server_SubmitVote                          	= new ConsoleCommand() { 	Name="Server_SubmitVote",                          	Group="Server",   	Command="Server.SubmitVote",                          	 	Args = ArgType.None,                                   	Flags=Flag.Server,                         	Description="Sumbits a vote" };
public static ConsoleCommand Server_TeamShuffleEnabled                  	= new ConsoleCommand() { 	Name="Server_TeamShuffleEnabled",                  	Group="Server",   	Command="Server.TeamShuffleEnabled",                  	 	Args = ArgType.Boolean,                                	Flags=Flag.Server,                         	Description="Controls whether or not the teams will be automatically shuffled before the game starts." };
public static ConsoleCommand Server_TeamSize                            	= new ConsoleCommand() { 	Name="Server_TeamSize",                            	Group="Server",   	Command="Server.TeamSize",                            	 	Args = ArgType.NumericRange, RangeMin=1, RangeMax=8,   	Flags=Flag.Server,                         	Description="Set the minimum number of players each team must have before a new team is assigned" };
public static ConsoleCommand Server_TempBanDuration                     	= new ConsoleCommand() { 	Name="Server_TempBanDuration",                     	Group="Server",   	Command="Server.TempBanDuration",                     	 	Args = ArgType.NumericRange, RangeMin=1, RangeMax=10,  	Flags=Flag.Server,                         	Description="Duration of a temporary ban (in games)" };
public static ConsoleCommand Server_Unannounce                          	= new ConsoleCommand() { 	Name="Server_Unannounce",                          	Group="Server",   	Command="Server.Unannounce",                          	 	Args = ArgType.None,                                   	Flags=Flag.Server|Flag.Banned,             	Description="Notifies the master servers to remove this server" };
public static ConsoleCommand Server_Unban                               	= new ConsoleCommand() { 	Name="Server_Unban",                               	Group="Server",   	Command="Server.Unban",                               	 	Args = ArgType.PlayerName,                             	Flags=Flag.Server,                         	Description="Removes from the ban list" };
public static ConsoleCommand Server_UnlimitedSprint                     	= new ConsoleCommand() { 	Name="Server_UnlimitedSprint",                     	Group="Server",   	Command="Server.UnlimitedSprint",                     	 	Args = ArgType.Boolean,                                	Flags=Flag.Server,                         	Description="Controls whether unlimited sprint is enabled on the server" };
public static ConsoleCommand Server_UnmutePlayer                        	= new ConsoleCommand() { 	Name="Server_UnmutePlayer",                        	Group="Server",   	Command="Server.UnmutePlayer",                        	 	Args = ArgType.PlayerName,                             	Flags=Flag.Server,                         	Description="unmutes Player from Chat" };
public static ConsoleCommand Server_VotePassPercentage                  	= new ConsoleCommand() { 	Name="Server_VotePassPercentage",                  	Group="Server",   	Command="Server.VotePassPercentage",                  	 	Args = ArgType.NumericRange, RangeMin=0, RangeMax=100, 	Flags=Flag.Server,                         	Description="Percentage of players required to vote yes for a chat command vote to pass" };
public static ConsoleCommand Server_WebsocketInfo                       	= new ConsoleCommand() { 	Name="Server_WebsocketInfo",                       	Group="Server",   	Command="Server.WebsocketInfo",                       	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Display the websocket password for the current server" };
public static ConsoleCommand Settings_AnisotropicFiltering              	= new ConsoleCommand() { 	Name="Settings_AnisotropicFiltering",              	Group="Settings", 	Command="Settings.AnisotropicFiltering",              	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Sets the anisotropic filtering quality level" };
public static ConsoleCommand Settings_Antialiasing                      	= new ConsoleCommand() { 	Name="Settings_Antialiasing",                      	Group="Settings", 	Command="Settings.Antialiasing",                      	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls whether antialiasing is disabled (0), FXAA is enabled (1)" };
public static ConsoleCommand Settings_AudioOutputDevice                 	= new ConsoleCommand() { 	Name="Settings_AudioOutputDevice",                 	Group="Settings", 	Command="Settings.AudioOutputDevice",                 	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Sets the audio output device to use (0) being system default" };
public static ConsoleCommand Settings_AudioOutputDeviceList             	= new ConsoleCommand() { 	Name="Settings_AudioOutputDeviceList",             	Group="Settings", 	Command="Settings.AudioOutputDeviceList",             	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="List available audio output devices" };
public static ConsoleCommand Settings_AutoCentering                     	= new ConsoleCommand() { 	Name="Settings_AutoCentering",                     	Group="Settings", 	Command="Settings.AutoCentering",                     	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls whether auto-centering is enabled (1) or disabled (0)" };
public static ConsoleCommand Settings_BlurQuality                       	= new ConsoleCommand() { 	Name="Settings_BlurQuality",                       	Group="Settings", 	Command="Settings.BlurQuality",                       	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Specify motion blur, UI and depth of field quality. Higher qualities can severely degrade performance at higher resolutions." };
public static ConsoleCommand Settings_Brightness                        	= new ConsoleCommand() { 	Name="Settings_Brightness",                        	Group="Settings", 	Command="Settings.Brightness",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls the brightness level (0 - 100)" };
public static ConsoleCommand Settings_Contrast                          	= new ConsoleCommand() { 	Name="Settings_Contrast",                          	Group="Settings", 	Command="Settings.Contrast",                          	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls the contrast level (0 - 100)" };
public static ConsoleCommand Settings_DecoratorDistance                 	= new ConsoleCommand() { 	Name="Settings_DecoratorDistance",                 	Group="Settings", 	Command="Settings.DecoratorDistance",                 	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Decorator render distance" };
public static ConsoleCommand Settings_DetailsQuality                    	= new ConsoleCommand() { 	Name="Settings_DetailsQuality",                    	Group="Settings", 	Command="Settings.DetailsQuality",                    	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls whether the details quality level is low, medium or high" };
public static ConsoleCommand Settings_DisplayHints                      	= new ConsoleCommand() { 	Name="Settings_DisplayHints",                      	Group="Settings", 	Command="Settings.DisplayHints",                      	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls whether displaying of hints is enabled (1) or disabled (0)" };
public static ConsoleCommand Settings_EffectsQuality                    	= new ConsoleCommand() { 	Name="Settings_EffectsQuality",                    	Group="Settings", 	Command="Settings.EffectsQuality",                    	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls whether the effects quality level is low, medium or high" };
public static ConsoleCommand Settings_ExposureCpu                       	= new ConsoleCommand() { 	Name="Settings_ExposureCpu",                       	Group="Settings", 	Command="Settings.ExposureCpu",                       	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Disables GPU occlusion for exposure/bloom and calculates it on the CPU instead" };
public static ConsoleCommand Settings_FirstPersonJumpAndLand            	= new ConsoleCommand() { 	Name="Settings_FirstPersonJumpAndLand",            	Group="Settings", 	Command="Settings.FirstPersonJumpAndLand",            	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls whether the Halo Online FP Jump/Land/Fall Animations are enabled" };
public static ConsoleCommand Settings_Fullscreen                        	= new ConsoleCommand() { 	Name="Settings_Fullscreen",                        	Group="Settings", 	Command="Settings.Fullscreen",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls whether the game is windowed (0) or fullscreen (1)" };
public static ConsoleCommand Settings_Gamepad                           	= new ConsoleCommand() { 	Name="Settings_Gamepad",                           	Group="Settings", 	Command="Settings.Gamepad",                           	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls whether gamepad is enabled (1) or disabled (0)" };
public static ConsoleCommand Settings_HUDShake                          	= new ConsoleCommand() { 	Name="Settings_HUDShake",                          	Group="Settings", 	Command="Settings.HUDShake",                          	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls whether hud shake is enabled (1) or disabled (0)" };
public static ConsoleCommand Settings_InGameMusicVolume                 	= new ConsoleCommand() { 	Name="Settings_InGameMusicVolume",                 	Group="Settings", 	Command="Settings.InGameMusicVolume",                 	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls the music volume during matches" };
public static ConsoleCommand Settings_InvertLook                        	= new ConsoleCommand() { 	Name="Settings_InvertLook",                        	Group="Settings", 	Command="Settings.InvertLook",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls whether look-inversion is enabled (1) or disabled (0)" };
public static ConsoleCommand Settings_InvertMouse                       	= new ConsoleCommand() { 	Name="Settings_InvertMouse",                       	Group="Settings", 	Command="Settings.InvertMouse",                       	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls whether mouse-inversion is enabled (1) or disabled (0)" };
public static ConsoleCommand Settings_LODDistance                       	= new ConsoleCommand() { 	Name="Settings_LODDistance",                       	Group="Settings", 	Command="Settings.LODDistance",                       	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="LOD render distance scale" };
public static ConsoleCommand Settings_LightingQuality                   	= new ConsoleCommand() { 	Name="Settings_LightingQuality",                   	Group="Settings", 	Command="Settings.LightingQuality",                   	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls whether the lighting quality level is low, medium or high" };
public static ConsoleCommand Settings_LookSensitivity                   	= new ConsoleCommand() { 	Name="Settings_LookSensitivity",                   	Group="Settings", 	Command="Settings.LookSensitivity",                   	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls the controller look sensitivity (0 - 100)" };
public static ConsoleCommand Settings_MainMenuMusicVolume               	= new ConsoleCommand() { 	Name="Settings_MainMenuMusicVolume",               	Group="Settings", 	Command="Settings.MainMenuMusicVolume",               	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls the main menu music volume" };
public static ConsoleCommand Settings_MasterVolume                      	= new ConsoleCommand() { 	Name="Settings_MasterVolume",                      	Group="Settings", 	Command="Settings.MasterVolume",                      	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls the master volume" };
public static ConsoleCommand Settings_MotionBlur                        	= new ConsoleCommand() { 	Name="Settings_MotionBlur",                        	Group="Settings", 	Command="Settings.MotionBlur",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls whether motion blur is enabled (1) or disabled (0)" };
public static ConsoleCommand Settings_MotionBlurAlways                  	= new ConsoleCommand() { 	Name="Settings_MotionBlurAlways",                  	Group="Settings", 	Command="Settings.MotionBlurAlways",                  	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Specifies whether to always apply motion blur or only with camera movement" };
public static ConsoleCommand Settings_MotionBlurStrength                	= new ConsoleCommand() { 	Name="Settings_MotionBlurStrength",                	Group="Settings", 	Command="Settings.MotionBlurStrength",                	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls motion blur strength" };
public static ConsoleCommand Settings_MouseAcceleration                 	= new ConsoleCommand() { 	Name="Settings_MouseAcceleration",                 	Group="Settings", 	Command="Settings.MouseAcceleration",                 	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls the level of mouse acceleration (0 - 100)" };
public static ConsoleCommand Settings_MouseFilter                       	= new ConsoleCommand() { 	Name="Settings_MouseFilter",                       	Group="Settings", 	Command="Settings.MouseFilter",                       	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls whether mouse-filtering is enabled (1) or disabled (0)" };
public static ConsoleCommand Settings_MouseSensitivityHorizontal        	= new ConsoleCommand() { 	Name="Settings_MouseSensitivityHorizontal",        	Group="Settings", 	Command="Settings.MouseSensitivityHorizontal",        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls the horizontal mouse sensitivity (0 - 100)" };
public static ConsoleCommand Settings_MouseSensitivityVehicleHorizontal 	= new ConsoleCommand() { 	Name="Settings_MouseSensitivityVehicleHorizontal", 	Group="Settings", 	Command="Settings.MouseSensitivityVehicleHorizontal", 	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls the horizontal mouse sensitivity for vehicles (0 - 100)" };
public static ConsoleCommand Settings_MouseSensitivityVehicleVertical   	= new ConsoleCommand() { 	Name="Settings_MouseSensitivityVehicleVertical",   	Group="Settings", 	Command="Settings.MouseSensitivityVehicleVertical",   	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls the vertical mouse sensitivity for vehicles (0 - 100)" };
public static ConsoleCommand Settings_MouseSensitivityVertical          	= new ConsoleCommand() { 	Name="Settings_MouseSensitivityVertical",          	Group="Settings", 	Command="Settings.MouseSensitivityVertical",          	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls the vertical mouse sensitivity (0 - 100)" };
public static ConsoleCommand Settings_MusicInLobby                      	= new ConsoleCommand() { 	Name="Settings_MusicInLobby",                      	Group="Settings", 	Command="Settings.MusicInLobby",                      	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Sets whether music should play after returning to the lobby" };
public static ConsoleCommand Settings_PersistentLobby                   	= new ConsoleCommand() { 	Name="Settings_PersistentLobby",                   	Group="Settings", 	Command="Settings.PersistentLobby",                   	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Sets whether the lobby will try to set the previously loaded map, variant type and mod from previous sessions" };
public static ConsoleCommand Settings_PlayerMarkerColors                	= new ConsoleCommand() { 	Name="Settings_PlayerMarkerColors",                	Group="Settings", 	Command="Settings.PlayerMarkerColors",                	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls whether the player marker colors are default, ally or armor" };
public static ConsoleCommand Settings_PostprocessingQuality             	= new ConsoleCommand() { 	Name="Settings_PostprocessingQuality",             	Group="Settings", 	Command="Settings.PostprocessingQuality",             	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls whether the postprocessing quality level is low, medium or high" };
public static ConsoleCommand Settings_Reset                             	= new ConsoleCommand() { 	Name="Settings_Reset",                             	Group="Settings", 	Command="Settings.Reset",                             	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Restores default settings" };
public static ConsoleCommand Settings_SSAO                              	= new ConsoleCommand() { 	Name="Settings_SSAO",                              	Group="Settings", 	Command="Settings.SSAO",                              	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Enable or disable SSAO" };
public static ConsoleCommand Settings_ScreenResolution                  	= new ConsoleCommand() { 	Name="Settings_ScreenResolution",                  	Group="Settings", 	Command="Settings.ScreenResolution",                  	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls the screen resolution" };
public static ConsoleCommand Settings_SfxVolume                         	= new ConsoleCommand() { 	Name="Settings_SfxVolume",                         	Group="Settings", 	Command="Settings.SfxVolume",                         	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls the sfx volume" };
public static ConsoleCommand Settings_ShadowQuality                     	= new ConsoleCommand() { 	Name="Settings_ShadowQuality",                     	Group="Settings", 	Command="Settings.ShadowQuality",                     	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls whether the shadow quality level is low, medium or high" };
public static ConsoleCommand Settings_ShadowResolution                  	= new ConsoleCommand() { 	Name="Settings_ShadowResolution",                  	Group="Settings", 	Command="Settings.ShadowResolution",                  	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls global shadow map resolution" };
public static ConsoleCommand Settings_Subtitles                         	= new ConsoleCommand() { 	Name="Settings_Subtitles",                         	Group="Settings", 	Command="Settings.Subtitles",                         	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Changes subtitles display setting (0 = Auto; 1 = On; 2 = Off)" };
public static ConsoleCommand Settings_TextureFilteringQuality           	= new ConsoleCommand() { 	Name="Settings_TextureFilteringQuality",           	Group="Settings", 	Command="Settings.TextureFilteringQuality",           	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls whether the texture-filtering quality level is low, medium or high" };
public static ConsoleCommand Settings_TextureResolution                 	= new ConsoleCommand() { 	Name="Settings_TextureResolution",                 	Group="Settings", 	Command="Settings.TextureResolution",                 	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls whether the texture resolution level is low, medium or high" };
public static ConsoleCommand Settings_ToggleCrouch                      	= new ConsoleCommand() { 	Name="Settings_ToggleCrouch",                      	Group="Settings", 	Command="Settings.ToggleCrouch",                      	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls whether crouch-toggling is enabled (1) or disabled (0)" };
public static ConsoleCommand Settings_VSync                             	= new ConsoleCommand() { 	Name="Settings_VSync",                             	Group="Settings", 	Command="Settings.VSync",                             	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Controls whether vertical sync is enabled (1) or disabled (0)" };
public static ConsoleCommand Time_GameSpeed                             	= new ConsoleCommand() { 	Name="Time_GameSpeed",                             	Group="Time",     	Command="Time.GameSpeed",                             	 	Args = ArgType.NumericRange, RangeMin=0, RangeMax=10,  	Flags=Flag.Server,                         	Description="The game's speed" };
public static ConsoleCommand Tweaks_DisableHitMarkers                   	= new ConsoleCommand() { 	Name="Tweaks_DisableHitMarkers",                   	Group="Tweaks",   	Command="Tweaks.DisableHitMarkers",                   	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Disables weapon hitmarkers." };
public static ConsoleCommand Tweaks_DisableReactorFog                   	= new ConsoleCommand() { 	Name="Tweaks_DisableReactorFog",                   	Group="Tweaks",   	Command="Tweaks.DisableReactorFog",                   	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Disable the fog effects around the moving platforms on the Reactor map to increase performance." };
public static ConsoleCommand Tweaks_DisableWeaponOutline                	= new ConsoleCommand() { 	Name="Tweaks_DisableWeaponOutline",                	Group="Tweaks",   	Command="Tweaks.DisableWeaponOutline",                	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Disables the outline effect on weapons and equipment." };
public static ConsoleCommand Tweaks_FlatHUD                             	= new ConsoleCommand() { 	Name="Tweaks_FlatHUD",                             	Group="Tweaks",   	Command="Tweaks.FlatHUD",                             	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Removes distortion from the HUD." };
public static ConsoleCommand UPnP_Enabled                               	= new ConsoleCommand() { 	Name="UPnP_Enabled",                               	Group="UPnP",     	Command="UPnP.Enabled",                               	 	Args = ArgType.Boolean,                                	Flags=Flag.Server|Flag.Banned,             	Description="Enables UPnP to automatically port forward when hosting a game." };
public static ConsoleCommand VoIP_AGC                                   	= new ConsoleCommand() { 	Name="VoIP_AGC",                                   	Group="VoIP",     	Command="VoIP.AGC",                                   	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Toggle automatic gain control" };
public static ConsoleCommand VoIP_EchoCancelation                       	= new ConsoleCommand() { 	Name="VoIP_EchoCancelation",                       	Group="VoIP",     	Command="VoIP.EchoCancelation",                       	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Toggle echo cancellation" };
public static ConsoleCommand VoIP_Enabled                               	= new ConsoleCommand() { 	Name="VoIP_Enabled",                               	Group="VoIP",     	Command="VoIP.Enabled",                               	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Toggle voip on or off" };
public static ConsoleCommand VoIP_IncomingVolume                        	= new ConsoleCommand() { 	Name="VoIP_IncomingVolume",                        	Group="VoIP",     	Command="VoIP.IncomingVolume",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Set the default incoming voice chat volume" };
public static ConsoleCommand VoIP_MaximumBitrate                        	= new ConsoleCommand() { 	Name="VoIP_MaximumBitrate",                        	Group="VoIP",     	Command="VoIP.MaximumBitrate",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Set the maximum bitrate for each voip peer" };
public static ConsoleCommand VoIP_MicrophoneID                          	= new ConsoleCommand() { 	Name="VoIP_MicrophoneID",                          	Group="VoIP",     	Command="VoIP.MicrophoneID",                          	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="microphone label to use for voip, blank is default device" };
public static ConsoleCommand VoIP_NoiseSupress                          	= new ConsoleCommand() { 	Name="VoIP_NoiseSupress",                          	Group="VoIP",     	Command="VoIP.NoiseSupress",                          	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Toggle noise supression" };
public static ConsoleCommand VoIP_OutgoingVolume                        	= new ConsoleCommand() { 	Name="VoIP_OutgoingVolume",                        	Group="VoIP",     	Command="VoIP.OutgoingVolume",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Set the outgoing voice volume" };
public static ConsoleCommand VoIP_PTTSoundEnabled                       	= new ConsoleCommand() { 	Name="VoIP_PTTSoundEnabled",                       	Group="VoIP",     	Command="VoIP.PTTSoundEnabled",                       	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Toggles the sound played when using Push-To-Talk." };
public static ConsoleCommand VoIP_PTT_Enabled                           	= new ConsoleCommand() { 	Name="VoIP_PTT_Enabled",                           	Group="VoIP",     	Command="VoIP.PTT_Enabled",                           	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Enable PTT(1) or voice activation(0)" };
public static ConsoleCommand VoIP_SpeakingPlayerOnHUD                   	= new ConsoleCommand() { 	Name="VoIP_SpeakingPlayerOnHUD",                   	Group="VoIP",     	Command="VoIP.SpeakingPlayerOnHUD",                   	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Shows the speaking player on the HUD, rather than the web overlay." };
public static ConsoleCommand VoIP_Stats                                 	= new ConsoleCommand() { 	Name="VoIP_Stats",                                 	Group="VoIP",     	Command="VoIP.Stats",                                 	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Enable voip statics overlay" };
public static ConsoleCommand VoIP_Update                                	= new ConsoleCommand() { 	Name="VoIP_Update",                                	Group="VoIP",     	Command="VoIP.Update",                                	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="Updates the voip screen layer with variable states" };
public static ConsoleCommand Voting_CancelVote                          	= new ConsoleCommand() { 	Name="Voting_CancelVote",                          	Group="Voting",   	Command="Voting.CancelVote",                          	 	Args = ArgType.None,                                   	Flags=Flag.Server,                         	Description="Cancels the vote" };
public static ConsoleCommand Voting_DuplicationLevel                    	= new ConsoleCommand() { 	Name="Voting_DuplicationLevel",                    	Group="Voting",   	Command="Voting.DuplicationLevel",                    	 	Args = ArgType.NumericRange, RangeMin=0, RangeMax=2,   	Flags=Flag.Server,                         	Description="Whether duplicate voting options will be allowed." };
public static ConsoleCommand Voting_InstantVoteSkipEnabled              	= new ConsoleCommand() { 	Name="Voting_InstantVoteSkipEnabled",              	Group="Voting",   	Command="Voting.InstantVoteSkipEnabled",              	 	Args = ArgType.Boolean,                                	Flags=Flag.Server,                         	Description="Controls whether instant skip voting is enabled when majority of players vote for an option" };
public static ConsoleCommand Voting_InstantVoteSkipMinPlayers           	= new ConsoleCommand() { 	Name="Voting_InstantVoteSkipMinPlayers",           	Group="Voting",   	Command="Voting.InstantVoteSkipMinPlayers",           	 	Args = ArgType.NumericRange, RangeMin=1, RangeMax=16,  	Flags=Flag.Server,                         	Description="Minimum number of players that need to vote for an instant skip to be considered" };
public static ConsoleCommand Voting_JsonPath                            	= new ConsoleCommand() { 	Name="Voting_JsonPath",                            	Group="Voting",   	Command="Voting.JsonPath",                            	 	Args = ArgType.QuotedString,                           	Flags=Flag.Server|Flag.Banned,             	Description="Voting Json Path" };
public static ConsoleCommand Voting_MaxRematchCount                     	= new ConsoleCommand() { 	Name="Voting_MaxRematchCount",                     	Group="Voting",   	Command="Voting.MaxRematchCount",                     	 	Args = ArgType.NumericRange, RangeMin=0, RangeMax=100, 	Flags=Flag.Server,                         	Description="Controls how many rematches are allowed in the voting system, 0 - 100" };
public static ConsoleCommand Voting_MaxRevoteCount                      	= new ConsoleCommand() { 	Name="Voting_MaxRevoteCount",                      	Group="Voting",   	Command="Voting.MaxRevoteCount",                      	 	Args = ArgType.NumericRange, RangeMin=0, RangeMax=100, 	Flags=Flag.Server,                         	Description="Controls how many revotes are allowed in the voting system, 0 - 100" };
public static ConsoleCommand Voting_MaxVetoCount                        	= new ConsoleCommand() { 	Name="Voting_MaxVetoCount",                        	Group="Voting",   	Command="Voting.MaxVetoCount",                        	 	Args = ArgType.NumericRange, RangeMin=0, RangeMax=100, 	Flags=Flag.Server,                         	Description="Controls how many veto votes are allowed, 0 - 100" };
public static ConsoleCommand Voting_ReloadJson                          	= new ConsoleCommand() { 	Name="Voting_ReloadJson",                          	Group="Voting",   	Command="Voting.ReloadJson",                          	 	Args = ArgType.None,                                   	Flags=Flag.Server,                         	Description="Manually Reloads Json" };
public static ConsoleCommand Voting_SystemType                          	= new ConsoleCommand() { 	Name="Voting_SystemType",                          	Group="Voting",   	Command="Voting.SystemType",                          	 	Args = ArgType.NumericRange, RangeMin=0, RangeMax=2,   	Flags=Flag.Server,                         	Description="0 = Disabled, 1 = Voting, 2 = Vetoing" };
public static ConsoleCommand Voting_VetoPassPercentage                  	= new ConsoleCommand() { 	Name="Voting_VetoPassPercentage",                  	Group="Voting",   	Command="Voting.VetoPassPercentage",                  	 	Args = ArgType.NumericRange, RangeMin=1, RangeMax=100, 	Flags=Flag.Server,                         	Description="Percentage of players that need to vote for it to pass, 1 - 100" };
public static ConsoleCommand Voting_VetoSelectionType                   	= new ConsoleCommand() { 	Name="Voting_VetoSelectionType",                   	Group="Voting",   	Command="Voting.VetoSelectionType",                   	 	Args = ArgType.Boolean,                                	Flags=Flag.Server,                         	Description="0 = random, 1 = ordered" };
public static ConsoleCommand Voting_VetoWinnerShowTime                  	= new ConsoleCommand() { 	Name="Voting_VetoWinnerShowTime",                  	Group="Voting",   	Command="Voting.VetoWinnerShowTime",                  	 	Args = ArgType.NumericRange, RangeMin=1, RangeMax=100, 	Flags=Flag.Server,                         	Description="The length of time the winning option is show, 1 - 100" };
public static ConsoleCommand Voting_VoteGameStartCountdown              	= new ConsoleCommand() { 	Name="Voting_VoteGameStartCountdown",              	Group="Voting",   	Command="Voting.VoteGameStartCountdown",              	 	Args = ArgType.NumericRange, RangeMin=4, RangeMax=100, 	Flags=Flag.Server,                         	Description="Controls how many seconds to wait after a vote passes before calling 'game.start'. 4 - 100" };
public static ConsoleCommand Voting_VoteOptionCount                     	= new ConsoleCommand() { 	Name="Voting_VoteOptionCount",                     	Group="Voting",   	Command="Voting.VoteOptionCount",                     	 	Args = ArgType.NumericRange, RangeMin=1, RangeMax=4,   	Flags=Flag.Server,                         	Description="Controls how many voting options are displayed, 1 - 4" };
public static ConsoleCommand Voting_VoteTime                            	= new ConsoleCommand() { 	Name="Voting_VoteTime",                            	Group="Voting",   	Command="Voting.VoteTime",                            	 	Args = ArgType.NumericRange, RangeMin=1, RangeMax=100, 	Flags=Flag.Server,                         	Description="Controls how long the vote lasts for Map Voting. 1 - 100" };
public static ConsoleCommand Weapon_JSON_Delete                         	= new ConsoleCommand() { 	Name="Weapon_JSON_Delete",                         	Group="Weapon",   	Command="Weapon.JSON.Delete",                         	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="This delete a new weapon offset config." };
public static ConsoleCommand Weapon_JSON_File                           	= new ConsoleCommand() { 	Name="Weapon_JSON_File",                           	Group="Weapon",   	Command="Weapon.JSON.File",                           	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="The file weapon changes are saved to." };
public static ConsoleCommand Weapon_JSON_Load                           	= new ConsoleCommand() { 	Name="Weapon_JSON_Load",                           	Group="Weapon",   	Command="Weapon.JSON.Load",                           	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="This loads weapon offset." };
public static ConsoleCommand Weapon_JSON_New                            	= new ConsoleCommand() { 	Name="Weapon_JSON_New",                            	Group="Weapon",   	Command="Weapon.JSON.New",                            	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="This creates a new weapon offset config." };
public static ConsoleCommand Weapon_JSON_Save                           	= new ConsoleCommand() { 	Name="Weapon_JSON_Save",                           	Group="Weapon",   	Command="Weapon.JSON.Save",                           	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="This saves weapon offset." };
public static ConsoleCommand Weapon_Offset                              	= new ConsoleCommand() { 	Name="Weapon_Offset",                              	Group="Weapon",   	Command="Weapon.Offset",                              	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="This changes weapon offset." };
public static ConsoleCommand Weapon_Offset_Reset                        	= new ConsoleCommand() { 	Name="Weapon_Offset_Reset",                        	Group="Weapon",   	Command="Weapon.Offset.Reset",                        	 	Args = ArgType.Unmapped,                               	Flags=Flag.Client|Flag.Banned,             	Description="This resets weapon offset to default." };